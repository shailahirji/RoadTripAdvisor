{"ast":null,"code":"import _classCallCheck from \"/Volumes/HD/RoadTripAdvisor/Fred/RTA-landing-meal/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/HD/RoadTripAdvisor/Fred/RTA-landing-meal/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/HD/RoadTripAdvisor/Fred/RTA-landing-meal/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/HD/RoadTripAdvisor/Fred/RTA-landing-meal/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/HD/RoadTripAdvisor/Fred/RTA-landing-meal/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Volumes/HD/RoadTripAdvisor/Fred/RTA-landing-meal/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Volumes/HD/RoadTripAdvisor/Fred/RTA-landing-meal/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Volumes/HD/RoadTripAdvisor/Fred/RTA-landing-meal/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Volumes/HD/RoadTripAdvisor/Fred/RTA-landing-meal/src/components/MealMap.js\";\n\n/*global google*/\nimport React from \"react\";\nimport { compose, withProps, withHandlers, withState, withStateHandlers, lifecycle } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow, DirectionsRenderer } from \"react-google-maps\";\nimport { connect } from \"react-redux\";\nimport meal from \"./Markers/meal.png\";\nimport bar from \"./Markers/bar.png\";\nimport cafe from \"./Markers/cafe.png\";\nimport gbuss from \"./Markers/genericbusiness.png\";\nimport shopping from \"./Markers/shopping.png\";\nimport lodging from \"./Markers/lodging.png\";\nimport gas from \"./Markers/gasstation.png\";\nvar route_markers = [];\nvar center;\nvar center_lat;\nvar center_lng;\nvar MyMapComponent = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyD8kEdQYnlfJaGYD70GNqtxzf7oet_3wwY&libraries=places,geometry\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: \"100vh\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: \"100vh\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      position: \"relative\",\n      width: 420,\n      height: 480,\n      //WebkitFilter: \"drop-shadow(0px 0px 30px )\",\n      marginLeft: 330,\n      marginTop: -510\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })\n}), withScriptjs, withGoogleMap, lifecycle({\n  componentWillMount: function componentWillMount() {\n    this.getGeoLocation();\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    console.log(this.props.locations.from);\n    console.log(this.props.locations.to);\n    this.getGeoLocation2();\n  },\n  getGeoLocation: function () {\n    var _getGeoLocation = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var locations, from, to;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.props.locations) {\n                _context.next = 13;\n                break;\n              }\n\n              locations = this.props.locations; //passing array with start and end destination names\n\n              route_markers = []; //used to store the geolocation\n\n              _context.next = 5;\n              return this.getLocationCoordinates(locations.from);\n\n            case 5:\n              from = _context.sent;\n              _context.next = 8;\n              return this.getLocationCoordinates(locations.to);\n\n            case 8:\n              to = _context.sent;\n              //returns coordinates of end dest\n              route_markers.push(from); //add to the array\n\n              route_markers.push(to); //add to the array\n\n              this.setState({\n                markers: route_markers\n              });\n              this.componentDidMount(route_markers);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getGeoLocation() {\n      return _getGeoLocation.apply(this, arguments);\n    }\n\n    return getGeoLocation;\n  }(),\n  getGeoLocation2: function () {\n    var _getGeoLocation2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var locations, from, to;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.props.locations) {\n                _context2.next = 12;\n                break;\n              }\n\n              locations = this.props.locations; //passing array with start and end destination names\n\n              route_markers = []; //used to store the geolocation\n\n              _context2.next = 5;\n              return this.getLocationCoordinates(locations.from);\n\n            case 5:\n              from = _context2.sent;\n              _context2.next = 8;\n              return this.getLocationCoordinates(locations.to);\n\n            case 8:\n              to = _context2.sent;\n              //returns coordinates of end dest\n              route_markers.push(from); //add to the array\n\n              route_markers.push(to); //add to the array\n              //this.setState({ markers: route_markers });\n\n              console.log(\"getgeo2\");\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getGeoLocation2() {\n      return _getGeoLocation2.apply(this, arguments);\n    }\n\n    return getGeoLocation2;\n  }(),\n  getLocationCoordinates: function getLocationCoordinates(location) {\n    //computes the geocoordinates of given locations using googles Geocoder\n    return new Promise(function (resolve, reject) {\n      var geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({\n        address: location\n      }, function (result, status) {\n        if (status == \"OK\") {\n          var geometry = result[0].geometry.location;\n          var coordinates = {\n            lat: geometry.lat(),\n            lng: geometry.lng()\n          };\n          resolve(coordinates);\n        } else {\n          reject(\"ERROR\");\n        }\n      });\n    });\n  },\n  componentDidMount: function componentDidMount(route_markers) {\n    var _this = this;\n\n    //this method draws the route between start and end destination\n    if (route_markers) {\n      var DirectionsService = new google.maps.DirectionsService();\n      DirectionsService.route({\n        origin: new google.maps.LatLng(route_markers[0].lat, route_markers[0].lng),\n        destination: new google.maps.LatLng(route_markers[1].lat, route_markers[1].lng),\n        travelMode: google.maps.TravelMode.WALKING\n      }, function (result, status) {\n        if (status === google.maps.DirectionsStatus.OK) {\n          //console.log(result)\n          _this.setState({\n            directions: _objectSpread({}, result),\n            markers: true\n          });\n        } else {\n          console.error(\"error fetching directions \".concat(result));\n        }\n      });\n    }\n  }\n}), withState(\"places\", \"updatePlaces\", \"\", \"searchCriteria\", \"radius\", \"currLat\", \"currLng\"), withStateHandlers(function () {\n  return {\n    isOpen: false,\n    markerIndex: 0,\n    currentLatLng: {\n      lat: 47.6769683,\n      lng: -90.6769683\n    }\n  };\n}, {\n  onToggleOpen: function onToggleOpen(_ref) {\n    var isOpen = _ref.isOpen;\n    return function (index) {\n      return {\n        //used to handle info window on markers\n        isOpen: !isOpen,\n        markerIndex: index\n      };\n    };\n  }\n}), withHandlers(function () {\n  var refs = {\n    map: undefined,\n    array: []\n  };\n  return {\n    onMapMounted: function onMapMounted() {\n      return function (ref) {\n        refs.map = ref;\n      };\n    },\n    fetchPlaces: function () {\n      var _fetchPlaces = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_ref2) {\n        var updatePlaces, searchCriteria, radius, price, review, defaultCenter, bounds, maxPrice, service, x, output, request;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                updatePlaces = _ref2.updatePlaces, searchCriteria = _ref2.searchCriteria, radius = _ref2.radius, price = _ref2.price, review = _ref2.review, defaultCenter = _ref2.defaultCenter;\n                //fetches new places to dispaly on map by making a request to googles PlaceService api\n                bounds = refs.map.getBounds(); // refs.map.panToBounds(bounds);\n\n                center = refs.map.getCenter();\n                center_lat = center.lat();\n                center_lng = center.lng();\n                refs.array = searchCriteria;\n                maxPrice = price;\n                service = new google.maps.places.PlacesService(refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\n                output = [];\n                x = 0;\n\n              case 10:\n                if (!(x < refs.array.length)) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                request = {\n                  location: center,\n                  //location:(new google.maps.LatLng(47.6769683,-122.0284808)),or {lat:47.6769683,lng:-122.0284808}\n                  bounds: bounds,\n                  radius: radius,\n                  type: refs.array[x],\n                  openNow: true,\n                  maxPriceLevel: maxPrice,\n                  fields: [\"photos\", \"formatted_address\", \"name\", \"rating\", \"opening_hours\", \"geometry\"]\n                };\n                _context3.next = 14;\n                return service.nearbySearch(request, function (results, status) {\n                  return new Promise(function (reject, resolve) {\n                    if (status === google.maps.places.PlacesServiceStatus.OK) {\n                      var x;\n\n                      for (x = 0; x < results.length; x++) {\n                        output.push(results[x]);\n                      }\n\n                      resolve(output);\n                      updatePlaces(output);\n                    } else {\n                      reject();\n                    }\n                  }).then(function (response) {\n                    console.log(response);\n                  }).catch(function (e) {\n                    console.log(e);\n                  });\n                });\n\n              case 14:\n                x++;\n                _context3.next = 10;\n                break;\n\n              case 17:\n                //end of forloop\n                console.log(output);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetchPlaces(_x) {\n        return _fetchPlaces.apply(this, arguments);\n      }\n\n      return fetchPlaces;\n    }(),\n    currentLoc: function currentLoc(_ref3) {\n      var currLat = _ref3.currLat,\n          currLng = _ref3.currLng;\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          currLat = position.coords.latitude;\n          currLng = position.coords.longitude;\n        });\n      }\n    }\n  };\n}))(function (props) {\n  //console.log(route_markers)\n  if (props.places != null) // if(route_markers[1]!== undefined)\n    var target = new google.maps.LatLng(center_lat, center_lng); //this needs to update with the bound and not be fixed like this\n\n  if (props.defaultCenter !== undefined) {\n    target = props.defaultCenter;\n  }\n\n  var option = []; //new array to store results based on search criteria\n\n  if (props.places) {\n    //traverse through the place array, if there is a match between radius , price level. Enables makers to show without other information\n    props.places.map(function (place, i) {\n      //console.log(props.radius)\n      var x = google.maps.geometry.spherical.computeDistanceBetween(target, new google.maps.LatLng(place.geometry.location.lat(), place.geometry.location.lng())); //console.log(x)\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(target, new google.maps.LatLng(place.geometry.location.lat(), place.geometry.location.lng())) < props.radius) {\n        //console.log(\"DISTANCE MATCH\");\n        option.push(place);\n      }\n\n      if (place.price_level <= props.price) {\n        //console.log(\"PRICE MATCH\");\n        option.push(place);\n      }\n\n      if (place.rating <= props.ratings) {\n        //console.log(\"RATINGS MATCH\");\n        option.push(place);\n      }\n      /*\n            cant have any markers appear if user enters only type, we need more information along with type. \n            */\n      // if(place.types.length !== 0 && place.types.includes(props.searchCriteria)){\n      //     console.log(\"here \"+props.searchCriteria)\n      //     option.push(place)\n      // }\n\n    });\n  }\n\n  var icon_map = {};\n  icon_map[\"https://maps.gstatic.com/mapfiles/place_api/icons/restaurant-71.png\"] = meal;\n  icon_map[\"https://maps.gstatic.com/mapfiles/place_api/icons/cafe-71.png\"] = cafe;\n  icon_map[\"https://maps.gstatic.com/mapfiles/place_api/icons/bar-71.png\"] = bar;\n  icon_map[\"https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png\"] = gbuss;\n  icon_map[\"https://maps.gstatic.com/mapfiles/place_api/icons/shopping-71.png\"] = shopping;\n  icon_map[\"https://maps.gstatic.com/mapfiles/place_api/icons/lodging-71.png\"] = lodging;\n  icon_map[\"https://maps.gstatic.com/mapfiles/place_api/icons/gas_station-71.png\"] = gas; //console.log(option);\n\n  return (//This component uses the fetchplaces function defined above to pick the location of the maps current focus and display the place markers according to user request.\n    React.createElement(GoogleMap, {\n      onTilesLoaded: props.fetchPlaces,\n      ref: props.onMapMounted,\n      onClick: props.fetchPlaces,\n      defaultZoom: 13,\n      drag: props.fetchPlaces,\n      zoom_changed: props.fetchPlaces,\n      defaultCenter: {\n        lat: 47.6769683,\n        lng: -122.0284808\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, option && option.map(function (place, i) {\n      return (//using values collected into options array, displace markers onto the map using those place locations\n        React.createElement(Marker, {\n          key: i,\n          position: {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng()\n          },\n          onClick: function onClick() {\n            props.onToggleOpen(i);\n          },\n          icon: {\n            url: icon_map[place.icon],\n            scaledSize: new google.maps.Size(40, 40)\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 337\n          },\n          __self: this\n        }, props.isOpen && props.markerIndex === i && React.createElement(InfoWindow, {\n          onCloseClick: props.onToggleOpen,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 352\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353\n          },\n          __self: this\n        }, place.name + \" \", React.createElement(\"button\", {\n          onClick: function onClick() {\n            return props.handleClick(place.geometry.location.lat(), place.geometry.location.lng(), place.name);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355\n          },\n          __self: this\n        }, \"+\"))))\n      );\n    }), props.directions && React.createElement(DirectionsRenderer, {\n      directions: props.directions,\n      suppressMarkers: props.markers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }))\n  );\n});\n\nvar MealMap =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MealMap, _React$Component);\n\n  function MealMap() {\n    _classCallCheck(this, MealMap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MealMap).apply(this, arguments));\n  }\n\n  _createClass(MealMap, [{\n    key: \"render\",\n    value: function render() {\n      var searchCriteria = this.props.search;\n      var radius = this.props.radius;\n      var price = this.props.price;\n      var ratings = this.props.reviews;\n      var types = [];\n      var locations = this.props.locations;\n\n      if (searchCriteria.length !== 0 || radius !== 0 || price !== 0) {\n        searchCriteria.map(function (select) {\n          //sending an array of user's meal type selection for processing into our component\n          types.push(select.label);\n        }); // calling our MyMapComponent defined above and passing in user requirments\n\n        return React.createElement(MyMapComponent, {\n          searchCriteria: types,\n          price: price,\n          review: ratings,\n          radius: radius * 1609 //converting into meters\n          ,\n          locations: locations,\n          handleClick: this.props.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 398\n          },\n          __self: this\n        });\n      }\n\n      return (//to prevent from crashing\n        React.createElement(MyMapComponent, {\n          searchCriteria: \"\",\n          price: \"any\",\n          review: \"any\",\n          radius: \"0\",\n          handleClick: function handleClick() {\n            return console.log(\"Banana\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 411\n          },\n          __self: this\n        })\n      );\n    }\n  }]);\n\n  return MealMap;\n}(React.Component);\n\nexport { MealMap as default };","map":{"version":3,"sources":["/Volumes/HD/RoadTripAdvisor/Fred/RTA-landing-meal/src/components/MealMap.js"],"names":["React","compose","withProps","withHandlers","withState","withStateHandlers","lifecycle","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","DirectionsRenderer","connect","meal","bar","cafe","gbuss","shopping","lodging","gas","route_markers","center","center_lat","center_lng","MyMapComponent","googleMapURL","loadingElement","height","containerElement","mapElement","position","width","marginLeft","marginTop","componentWillMount","getGeoLocation","componentDidUpdate","console","log","props","locations","from","to","getGeoLocation2","getLocationCoordinates","push","setState","markers","componentDidMount","location","Promise","resolve","reject","geocoder","window","google","maps","Geocoder","geocode","address","result","status","geometry","coordinates","lat","lng","DirectionsService","route","origin","LatLng","destination","travelMode","TravelMode","WALKING","DirectionsStatus","OK","directions","error","isOpen","markerIndex","currentLatLng","onToggleOpen","index","refs","map","undefined","array","onMapMounted","ref","fetchPlaces","updatePlaces","searchCriteria","radius","price","review","defaultCenter","bounds","getBounds","getCenter","maxPrice","service","places","PlacesService","context","__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","output","x","length","request","type","openNow","maxPriceLevel","fields","nearbySearch","results","PlacesServiceStatus","then","response","catch","e","currentLoc","currLat","currLng","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","target","option","place","i","spherical","computeDistanceBetween","price_level","rating","ratings","icon_map","url","icon","scaledSize","Size","name","handleClick","MealMap","search","reviews","types","select","label","Component"],"mappings":"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","sourcesContent":["/*global google*/\nimport React from \"react\";\nimport {\n  compose,\n  withProps,\n  withHandlers,\n  withState,\n  withStateHandlers,\n  lifecycle\n} from \"recompose\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  DirectionsRenderer\n} from \"react-google-maps\";\nimport { connect } from \"react-redux\";\nimport meal from \"./Markers/meal.png\";\nimport bar from \"./Markers/bar.png\";\nimport cafe from \"./Markers/cafe.png\";\nimport gbuss from \"./Markers/genericbusiness.png\";\nimport shopping from \"./Markers/shopping.png\";\nimport lodging from \"./Markers/lodging.png\";\nimport gas from \"./Markers/gasstation.png\";\n\nvar route_markers = [];\nvar center;\nvar center_lat;\nvar center_lng;\nconst MyMapComponent = compose(\n  withProps({\n    googleMapURL:\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyD8kEdQYnlfJaGYD70GNqtxzf7oet_3wwY&libraries=places,geometry\",\n    loadingElement: <div style={{ height: \"100vh\" }} />,\n    containerElement: <div style={{ height: \"100vh\" }} />,\n    mapElement: (\n      <div\n        style={{\n          position: \"relative\",\n          width: 420,\n          height: 480,\n          //WebkitFilter: \"drop-shadow(0px 0px 30px )\",\n          marginLeft: 330,\n          marginTop: -510\n        }}\n      />\n    )\n  }),\n  withScriptjs,\n  withGoogleMap,\n  lifecycle({\n    componentWillMount() {\n      this.getGeoLocation();\n    },\n    componentDidUpdate() {\n      console.log(this.props.locations.from);\n      console.log(this.props.locations.to);\n      this.getGeoLocation2();\n    },\n    async getGeoLocation() {\n      //this method gets the geolocation coordinates by calling getLocationCoordinates while passing location names as input from user\n      if (this.props.locations) {\n        const locations = this.props.locations; //passing array with start and end destination names\n        route_markers = []; //used to store the geolocation\n        const from = await this.getLocationCoordinates(locations.from); //returns coordinate of start dest\n        const to = await this.getLocationCoordinates(locations.to); //returns coordinates of end dest\n        route_markers.push(from); //add to the array\n        route_markers.push(to); //add to the array\n        this.setState({ markers: route_markers });\n        this.componentDidMount(route_markers);\n      }\n    },\n    async getGeoLocation2() {\n      //this method gets the geolocation coordinates by calling getLocationCoordinates while passing location names as input from user\n      if (this.props.locations) {\n        const locations = this.props.locations; //passing array with start and end destination names\n        route_markers = []; //used to store the geolocation\n        const from = await this.getLocationCoordinates(locations.from); //returns coordinate of start dest\n        const to = await this.getLocationCoordinates(locations.to); //returns coordinates of end dest\n        route_markers.push(from); //add to the array\n        route_markers.push(to); //add to the array\n        //this.setState({ markers: route_markers });\n        console.log(\"getgeo2\");\n      }\n    },\n    getLocationCoordinates(location) {\n      //computes the geocoordinates of given locations using googles Geocoder\n      return new Promise((resolve, reject) => {\n        const geocoder = new window.google.maps.Geocoder();\n        geocoder.geocode({ address: location }, (result, status) => {\n          if (status == \"OK\") {\n            const geometry = result[0].geometry.location;\n            const coordinates = {\n              lat: geometry.lat(),\n              lng: geometry.lng()\n            };\n            resolve(coordinates);\n          } else {\n            reject(\"ERROR\");\n          }\n        });\n      });\n    },\n    componentDidMount(route_markers) {\n      //this method draws the route between start and end destination\n      if (route_markers) {\n        const DirectionsService = new google.maps.DirectionsService();\n        DirectionsService.route(\n          {\n            origin: new google.maps.LatLng(\n              route_markers[0].lat,\n              route_markers[0].lng\n            ),\n            destination: new google.maps.LatLng(\n              route_markers[1].lat,\n              route_markers[1].lng\n            ),\n            travelMode: google.maps.TravelMode.WALKING\n          },\n          (result, status) => {\n            if (status === google.maps.DirectionsStatus.OK) {\n              //console.log(result)\n              this.setState({\n                directions: { ...result },\n                markers: true\n              });\n            } else {\n              console.error(`error fetching directions ${result}`);\n            }\n          }\n        );\n      }\n    }\n  }),\n  withState(\n    \"places\",\n    \"updatePlaces\",\n    \"\",\n    \"searchCriteria\",\n    \"radius\",\n    \"currLat\",\n    \"currLng\"\n  ),\n  withStateHandlers(\n    () => ({\n      isOpen: false,\n      markerIndex: 0,\n      currentLatLng: {\n        lat: 47.6769683,\n        lng: -90.6769683\n      }\n    }),\n    {\n      onToggleOpen: ({ isOpen }) => index => ({\n        //used to handle info window on markers\n        isOpen: !isOpen,\n        markerIndex: index\n      })\n    }\n  ),\n  withHandlers(() => {\n    const refs = {\n      map: undefined,\n      array: []\n    };\n    return {\n      onMapMounted: () => ref => {\n        refs.map = ref;\n      },\n      fetchPlaces: async ({\n        updatePlaces,\n        searchCriteria,\n        radius,\n        price,\n        review,\n        defaultCenter\n      }) => {\n        //fetches new places to dispaly on map by making a request to googles PlaceService api\n        const bounds = refs.map.getBounds();\n        // refs.map.panToBounds(bounds);\n        center = refs.map.getCenter();\n        center_lat = center.lat();\n        center_lng = center.lng();\n\n        refs.array = searchCriteria;\n        var maxPrice = price;\n        const service = new google.maps.places.PlacesService(\n          refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n        );\n        var x;\n        var output = [];\n\n        for (x = 0; x < refs.array.length; x++) {\n          var request = {\n            location: center, //location:(new google.maps.LatLng(47.6769683,-122.0284808)),or {lat:47.6769683,lng:-122.0284808}\n            bounds: bounds,\n            radius: radius,\n            type: refs.array[x],\n            openNow: true,\n            maxPriceLevel: maxPrice,\n            fields: [\n              \"photos\",\n              \"formatted_address\",\n              \"name\",\n              \"rating\",\n              \"opening_hours\",\n              \"geometry\"\n            ]\n          };\n\n          await service.nearbySearch(request, (results, status) => {\n            return new Promise((reject, resolve) => {\n              if (status === google.maps.places.PlacesServiceStatus.OK) {\n                var x;\n                for (x = 0; x < results.length; x++) output.push(results[x]);\n                resolve(output);\n                updatePlaces(output);\n              } else {\n                reject();\n              }\n            })\n              .then(response => {\n                console.log(response);\n              })\n              .catch(e => {\n                console.log(e);\n              });\n          });\n        } //end of forloop\n\n        console.log(output);\n      },\n      currentLoc: ({ currLat, currLng }) => {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(position => {\n            currLat = position.coords.latitude;\n            currLng = position.coords.longitude;\n          });\n        }\n      }\n    };\n  })\n)(props => {\n  //console.log(route_markers)\n  if (props.places != null)\n    // if(route_markers[1]!== undefined)\n    var target = new google.maps.LatLng(center_lat, center_lng); //this needs to update with the bound and not be fixed like this\n  if (props.defaultCenter !== undefined) {\n    target = props.defaultCenter;\n  }\n\n  var option = []; //new array to store results based on search criteria\n  if (props.places) {\n    //traverse through the place array, if there is a match between radius , price level. Enables makers to show without other information\n    props.places.map((place, i) => {\n      //console.log(props.radius)\n      var x = google.maps.geometry.spherical.computeDistanceBetween(\n        target,\n        new google.maps.LatLng(\n          place.geometry.location.lat(),\n          place.geometry.location.lng()\n        )\n      );\n      //console.log(x)\n      if (\n        google.maps.geometry.spherical.computeDistanceBetween(\n          target,\n          new google.maps.LatLng(\n            place.geometry.location.lat(),\n            place.geometry.location.lng()\n          )\n        ) < props.radius\n      ) {\n        //console.log(\"DISTANCE MATCH\");\n        option.push(place);\n      }\n      if (place.price_level <= props.price) {\n        //console.log(\"PRICE MATCH\");\n        option.push(place);\n      }\n\n      if (place.rating <= props.ratings) {\n        //console.log(\"RATINGS MATCH\");\n        option.push(place);\n      }\n\n      /*\n            cant have any markers appear if user enters only type, we need more information along with type. \n            */\n      // if(place.types.length !== 0 && place.types.includes(props.searchCriteria)){\n      //     console.log(\"here \"+props.searchCriteria)\n      //     option.push(place)\n\n      // }\n    });\n  }\n  var icon_map = {};\n  icon_map[\n    \"https://maps.gstatic.com/mapfiles/place_api/icons/restaurant-71.png\"\n  ] = meal;\n  icon_map[\n    \"https://maps.gstatic.com/mapfiles/place_api/icons/cafe-71.png\"\n  ] = cafe;\n  icon_map[\n    \"https://maps.gstatic.com/mapfiles/place_api/icons/bar-71.png\"\n  ] = bar;\n  icon_map[\n    \"https://maps.gstatic.com/mapfiles/place_api/icons/generic_business-71.png\"\n  ] = gbuss;\n  icon_map[\n    \"https://maps.gstatic.com/mapfiles/place_api/icons/shopping-71.png\"\n  ] = shopping;\n  icon_map[\n    \"https://maps.gstatic.com/mapfiles/place_api/icons/lodging-71.png\"\n  ] = lodging;\n  icon_map[\n    \"https://maps.gstatic.com/mapfiles/place_api/icons/gas_station-71.png\"\n  ] = gas;\n\n  //console.log(option);\n  return (\n    //This component uses the fetchplaces function defined above to pick the location of the maps current focus and display the place markers according to user request.\n    <GoogleMap\n      onTilesLoaded={props.fetchPlaces}\n      ref={props.onMapMounted}\n      onClick={props.fetchPlaces}\n      defaultZoom={13}\n      drag={props.fetchPlaces}\n      zoom_changed={props.fetchPlaces}\n      defaultCenter={{ lat: 47.6769683, lng: -122.0284808 }}\n    >\n      {option &&\n        option.map((place, i) => (\n          //using values collected into options array, displace markers onto the map using those place locations\n          <Marker\n            key={i}\n            position={{\n              lat: place.geometry.location.lat(),\n              lng: place.geometry.location.lng()\n            }}\n            onClick={() => {\n              props.onToggleOpen(i);\n            }}\n            icon={{\n              url: icon_map[place.icon],\n              scaledSize: new google.maps.Size(40, 40)\n            }}\n          >\n            {props.isOpen && props.markerIndex === i && (\n              <InfoWindow onCloseClick={props.onToggleOpen}>\n                <div>\n                  {place.name + \" \"}\n                  <button\n                    onClick={() =>\n                      props.handleClick(\n                        place.geometry.location.lat(),\n                        place.geometry.location.lng(),\n                        place.name\n                      )\n                    }\n                  >\n                    +\n                  </button>\n                </div>\n              </InfoWindow>\n            )}\n          </Marker>\n        ))}\n      {/*for creating path with the updated coordinates*/}\n      {props.directions && (\n        <DirectionsRenderer\n          directions={props.directions}\n          suppressMarkers={props.markers}\n        />\n      )}\n    </GoogleMap>\n  );\n});\n\nexport default class MealMap extends React.Component {\n  render() {\n    var searchCriteria = this.props.search;\n    var radius = this.props.radius;\n    var price = this.props.price;\n    var ratings = this.props.reviews;\n    var types = [];\n    var locations = this.props.locations;\n\n    if (searchCriteria.length !== 0 || radius !== 0 || price !== 0) {\n      searchCriteria.map(select => {\n        //sending an array of user's meal type selection for processing into our component\n        types.push(select.label);\n      });\n      // calling our MyMapComponent defined above and passing in user requirments\n      return (\n        <MyMapComponent\n          searchCriteria={types}\n          price={price}\n          review={ratings}\n          radius={radius * 1609} //converting into meters\n          locations={locations}\n          handleClick={this.props.handleClick}\n        />\n      );\n    }\n\n    return (\n      //to prevent from crashing\n      <MyMapComponent\n        searchCriteria=\"\"\n        price=\"any\"\n        review=\"any\"\n        radius=\"0\"\n        handleClick={() => console.log(\"Banana\")}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}