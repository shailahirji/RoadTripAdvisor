{"ast":null,"code":"import _classCallCheck from \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/src/components/Map.js\";\n//create component called CurrentLocation where all functionality to pick browsers location lies\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Geocode from \"react-geocode\";\nvar mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\nGeocode.setApiKey(\"AIzaSyD-a_aMfM44H43DL1gkBccsYjcYgZTZWQk\"); //When GoogleAPIwrapper ** loads on the page, it will create a google maps component and pass into our map/current location(not sure which one)\n//we are wrapping our main component and passing it into our map component as a prop.\n//we need to check for eith a new prop or the mounting of the component\n\nexport var CurrentLocation =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CurrentLocation, _React$Component);\n\n  function CurrentLocation(props) {\n    var _this;\n\n    _classCallCheck(this, CurrentLocation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CurrentLocation).call(this, props)); //make it stateful\n\n    var _this$props$initialCe = _this.props.initialCenter,\n        lat = _this$props$initialCe.lat,\n        lng = _this$props$initialCe.lng,\n        name = _this$props$initialCe.name;\n    _this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng,\n        name: name\n      },\n      showingInfoWindow: false\n    };\n    return _this;\n  } //handles the case when the map is available when the component mounts\n  //happens when the map has already been loaded previously\n  //\n\n\n  _createClass(CurrentLocation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.centerAroundCurrentLocation) {\n        if (navigator && navigator.geolocation) {\n          //Navigator uses browsers technology to determine the current location\n          //use navigation from native browser implementation\n          navigator.geolocation.getCurrentPosition(function (pos) {\n            //when component itself mounts, add a call back to run to fetch the current position\n            //when map is mounted, center is updated\n            var coords = pos.coords;\n\n            _this2.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude,\n                name_loc: Geocode.fromLatLng(coords.latitude, coords.longitude).then(function (response) {\n                  _this2.state.currentLocation.name_loc = response.results[0].formatted_address;\n                }, function (error) {\n                  console.log(error);\n                })\n              }\n            });\n          });\n        }\n      }\n\n      this.loadMap();\n    } //handles the case when the map is first loaded. When map is first loaded, we cant depend on google API beign available.\n    //therefor, first check if its loaded\n    //if our component is rendered without it, the google prop will be undefined. If loaded, itll be defined\n    //componentDidUpdate will run after the react component has updated\n    //componentDidUpdate is used to asure that the component has changed and that the map should update\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.google !== this.props.google) {\n        this.loadMap();\n      } //The map will not be repositioned to the new location, whehn the center is updated\n      //state will update but the center wont change\n\n\n      if (prevState.currentLocation !== this.state.currentLocation) {\n        //we check for an update to current location\n        this.recenterMap(); //will only be called when the currentLocation in the component state has been updated\n      }\n    }\n  }, {\n    key: \"recenterMap\",\n    value: function recenterMap() {\n      var map = this.map;\n      var current = this.state.currentLocation;\n      var google = this.props.google;\n      var maps = google.maps;\n\n      if (map) {\n        var center = new maps.LatLng(current.lat, current.lng, current.name_loc);\n        map.panTo(center); //method on google.maps.Map instance to change center of map\n      }\n    } //only called after the component has been rendered and grabs a reference to the DOM component\n    //gets any of the map on the page\n    //use GAPI funcitions to create map\n\n  }, {\n    key: \"loadMap\",\n    value: function loadMap() {\n      if (this.props && this.props.google) {\n        //make sure GAPI is available\n        //check if google is available\n        var google = this.props.google;\n        var maps = google.maps;\n        var mapRef = this.refs.map; //reference to the actual DOM element on the page not the Virtual DOM.\n        //we can set the google map to work directly\n\n        var node = ReactDOM.findDOMNode(mapRef); //grab ref to the dom where we want the map to be placed\n        //instantiate google map, not hard coded values\n\n        var zoom = this.props.zoom;\n        var _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng,\n            name = _this$state$currentLo.name; //pulling info from the state rther than props\n\n        var center = new maps.LatLng(lat, lng, name);\n        var mapConfig = Object.assign({}, {\n          //we need atleast 2 config options,\n          center: center,\n          //combination of lat and ong\n          zoom: zoom\n        });\n        this.map = new maps.Map(node, mapConfig); //constructor is accepting a DOM node and configuration object to create a map\n      }\n    } //React gives a convininent method for handing the updating of the props of children object of a component\n    //responsible for calling methods on children\n\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this3 = this;\n\n      var children = this.props.children; //usage of childre inside CurrentLocation component is optional ,return null if no children\n\n      if (!children) return; //React.Children.map alllows us to run over each children passed by component and run a function on\n\n      return React.Children.map(children, function (c) {\n        //enables each of CurrentLocation's chidlren to recieve their orignal props and also receice the map instance, google API instace and map cent from <CurrentLocation/> component\n        if (!c) return;\n        return React.cloneElement(c, {\n          //Reac.cloneElements is used to add props to a child inside component\n          //use R.cloneElem to append props and children to child\n          map: _this3.map,\n          //append map instance\n          google: _this3.props.google,\n          //append google prop\n          mapCenter: _this3.state.currentLocation //set map center as default of the marker\n\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = Object.assign({}, mapStyles.map); //the div below ref=map we are grabbing a reference to this component using reactDOM lib\n      //by adding the renderChild() below, when </CurrentLocation> is rendered it will place the map on the page\n      //and call lifecycle methods for the children\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: mapStyles,\n        ref: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Loading map . . .\"), this.renderChildren());\n    }\n  }]);\n\n  return CurrentLocation;\n}(React.Component);\nexport default CurrentLocation; //inoder to make center dynamic, we need to pass it in through props, allows us not to hard code this.props in loadMap()\n\nCurrentLocation.defaultProps = {\n  zoom: 15,\n  initialCenter: {\n    lat: 40.723839,\n    lng: -104.105515,\n    name: \"\"\n  },\n  centerAroundCurrentLocation: false,\n  //map should only use current location if boolean prop is true\n  visible: false\n};","map":{"version":3,"sources":["/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/src/components/Map.js"],"names":["React","ReactDOM","Geocode","mapStyles","map","position","width","height","setApiKey","CurrentLocation","props","initialCenter","lat","lng","name","state","currentLocation","showingInfoWindow","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","name_loc","fromLatLng","then","response","results","formatted_address","error","console","log","loadMap","prevProps","prevState","google","recenterMap","current","maps","center","LatLng","panTo","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","children","Children","c","cloneElement","mapCenter","style","renderChildren","Component","defaultProps","visible"],"mappings":"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","sourcesContent":["//create component called CurrentLocation where all functionality to pick browsers location lies\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Geocode from \"react-geocode\";\n\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\n\nGeocode.setApiKey(\"AIzaSyD-a_aMfM44H43DL1gkBccsYjcYgZTZWQk\");\n\n//When GoogleAPIwrapper ** loads on the page, it will create a google maps component and pass into our map/current location(not sure which one)\n//we are wrapping our main component and passing it into our map component as a prop.\n//we need to check for eith a new prop or the mounting of the component\n\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props); //make it stateful\n    const { lat, lng, name } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng,\n        name: name\n      },\n      showingInfoWindow: false\n    };\n  }\n  //handles the case when the map is available when the component mounts\n  //happens when the map has already been loaded previously\n  //\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        //Navigator uses browsers technology to determine the current location\n        //use navigation from native browser implementation\n        navigator.geolocation.getCurrentPosition(pos => {\n          //when component itself mounts, add a call back to run to fetch the current position\n          //when map is mounted, center is updated\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude,\n              name_loc: Geocode.fromLatLng(\n                coords.latitude,\n                coords.longitude\n              ).then(\n                response => {\n                  this.state.currentLocation.name_loc =\n                    response.results[0].formatted_address;\n                },\n                error => {\n                  console.log(error);\n                }\n              )\n            }\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n  //handles the case when the map is first loaded. When map is first loaded, we cant depend on google API beign available.\n  //therefor, first check if its loaded\n  //if our component is rendered without it, the google prop will be undefined. If loaded, itll be defined\n  //componentDidUpdate will run after the react component has updated\n  //componentDidUpdate is used to asure that the component has changed and that the map should update\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    //The map will not be repositioned to the new location, whehn the center is updated\n    //state will update but the center wont change\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      //we check for an update to current location\n      this.recenterMap(); //will only be called when the currentLocation in the component state has been updated\n    }\n  }\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng, current.name_loc);\n      map.panTo(center); //method on google.maps.Map instance to change center of map\n    }\n  }\n\n  //only called after the component has been rendered and grabs a reference to the DOM component\n  //gets any of the map on the page\n  //use GAPI funcitions to create map\n  loadMap() {\n    if (this.props && this.props.google) {\n      //make sure GAPI is available\n      //check if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n\n      //reference to the actual DOM element on the page not the Virtual DOM.\n      //we can set the google map to work directly\n      const node = ReactDOM.findDOMNode(mapRef); //grab ref to the dom where we want the map to be placed\n\n      //instantiate google map, not hard coded values\n      let { zoom } = this.props;\n      const { lat, lng, name } = this.state.currentLocation; //pulling info from the state rther than props\n      const center = new maps.LatLng(lat, lng, name);\n      const mapConfig = Object.assign(\n        {},\n        {\n          //we need atleast 2 config options,\n          center: center, //combination of lat and ong\n          zoom: zoom\n        }\n      );\n      this.map = new maps.Map(node, mapConfig); //constructor is accepting a DOM node and configuration object to create a map\n    }\n  }\n\n  //React gives a convininent method for handing the updating of the props of children object of a component\n  //responsible for calling methods on children\n  renderChildren() {\n    const { children } = this.props;\n    //usage of childre inside CurrentLocation component is optional ,return null if no children\n    if (!children) return;\n    //React.Children.map alllows us to run over each children passed by component and run a function on\n    return React.Children.map(children, c => {\n      //enables each of CurrentLocation's chidlren to recieve their orignal props and also receice the map instance, google API instace and map cent from <CurrentLocation/> component\n      if (!c) return;\n      return React.cloneElement(c, {\n        //Reac.cloneElements is used to add props to a child inside component\n        //use R.cloneElem to append props and children to child\n        map: this.map, //append map instance\n        google: this.props.google, //append google prop\n        mapCenter: this.state.currentLocation //set map center as default of the marker\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    //the div below ref=map we are grabbing a reference to this component using reactDOM lib\n    //by adding the renderChild() below, when </CurrentLocation> is rendered it will place the map on the page\n    //and call lifecycle methods for the children\n    return (\n      <div>\n        <div style={mapStyles} ref=\"map\">\n          Loading map . . .\n        </div>\n        {this.renderChildren()}\n      </div>\n    );\n  }\n}\n\nexport default CurrentLocation;\n\n//inoder to make center dynamic, we need to pass it in through props, allows us not to hard code this.props in loadMap()\nCurrentLocation.defaultProps = {\n  zoom: 15,\n  initialCenter: {\n    lat: 40.723839,\n    lng: -104.105515,\n    name: \"\"\n  },\n  centerAroundCurrentLocation: false, //map should only use current location if boolean prop is true\n  visible: false\n};\n"]},"metadata":{},"sourceType":"module"}