{"ast":null,"code":"\"use strict\";\n\nvar _interopRequire = function _interopRequire(obj) {\n  return obj && obj.__esModule ? obj[\"default\"] : obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var key in props) {\n      var prop = props[key];\n      prop.configurable = true;\n      if (prop.value) prop.writable = true;\n    }\n\n    Object.defineProperties(target, props);\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar _inherits = function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) subClass.__proto__ = superClass;\n};\n\nvar _classCallCheck = function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar React = _interopRequire(require(\"react\"));\n\nvar ReactDOM = _interopRequire(require(\"react-dom\"));\n\nvar classNames = _interopRequire(require(\"classnames\"));\n\nvar Dropdown = function (_React$Component) {\n  function Dropdown(props) {\n    _classCallCheck(this, Dropdown);\n\n    _get(Object.getPrototypeOf(Dropdown.prototype), \"constructor\", this).call(this, props);\n\n    this.state = {\n      selected: props.value || [],\n      isOpen: false\n    };\n    this.mounted = true;\n    this.handleDocumentClick = this.handleDocumentClick.bind(this);\n  }\n\n  _inherits(Dropdown, _React$Component);\n\n  _createClass(Dropdown, {\n    componentWillReceiveProps: {\n      value: function componentWillReceiveProps(newProps) {\n        if (newProps.value && newProps.value !== this.state.selected) {\n          this.setState({\n            selected: newProps.value\n          });\n        }\n      }\n    },\n    componentDidMount: {\n      value: function componentDidMount() {\n        document.addEventListener(\"click\", this.handleDocumentClick, false);\n      }\n    },\n    componentWillUpdate: {\n      value: function componentWillUpdate(_newProps, newState) {\n        if (newState.selected !== this.state.selected && this.props.onChange) {\n          this.props.onChange(newState.selected);\n        }\n      }\n    },\n    componentWillUnmount: {\n      value: function componentWillUnmount() {\n        this.mounted = false;\n        document.removeEventListener(\"click\", this.handleDocumentClick, false);\n      }\n    },\n    handleMouseDown: {\n      value: function handleMouseDown(event) {\n        if (event.type == \"mousedown\" && event.button !== 0) {\n          return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n        this.setState({\n          isOpen: !this.state.isOpen\n        });\n      }\n    },\n    setValue: {\n      value: function setValue(option) {\n        var selected = this.state.selected;\n        var optionIndex = selected.indexOf(option);\n        var newState = {\n          selected: optionIndex === -1 ? selected.concat(option) : selected.slice(0, optionIndex).concat(selected.slice(optionIndex + 1))\n        };\n        this.setState(newState);\n      }\n    },\n    renderOption: {\n      value: function renderOption(option) {\n        var optionClass = classNames({\n          \"Dropdown-option\": true,\n          \"is-selected\": this.state.selected.indexOf(option) !== -1\n        });\n        return React.createElement(\"div\", {\n          key: option.value,\n          className: optionClass,\n          onClick: this.setValue.bind(this, option)\n        }, option.label);\n      }\n    },\n    buildMenu: {\n      value: function buildMenu() {\n        var _this = this;\n\n        var ops = this.props.options.map(function (option) {\n          if (option.type == \"group\") {\n            var groupTitle = React.createElement(\"div\", {\n              className: \"title\"\n            }, option.name);\n\n            var _options = option.items.map(function (item) {\n              return _this.renderOption(item);\n            });\n\n            return React.createElement(\"div\", {\n              className: \"group\",\n              key: option.name\n            }, groupTitle, _options);\n          } else {\n            return _this.renderOption(option);\n          }\n        });\n        return ops.length ? ops : React.createElement(\"div\", {\n          className: \"Dropdown-noresults\"\n        }, \"No options found\");\n      }\n    },\n    handleDocumentClick: {\n      value: function handleDocumentClick(event) {\n        if (this.mounted) {\n          if (!ReactDOM.findDOMNode(this).contains(event.target)) {\n            this.setState({\n              isOpen: false\n            });\n          }\n        }\n      }\n    },\n    render: {\n      value: function render() {\n        var _props = this.props;\n        var className = _props.className;\n        var controlClassName = _props.controlClassName;\n        var menuClassName = _props.menuClassName;\n        var placeholder = _props.placeholder;\n        var noPreview = _props.noPreview;\n        var _state = this.state;\n        var selected = _state.selected;\n        var isOpen = _state.isOpen;\n        var value = selected.map(function (option) {\n          return option.label;\n        }).join(\", \");\n        var menu = isOpen ? React.createElement(\"div\", {\n          className: menuClassName\n        }, this.buildMenu()) : null;\n        var dropdownClass = classNames({\n          Dropdown: true,\n          \"is-open\": isOpen\n        }, className);\n        return React.createElement(\"div\", {\n          className: dropdownClass\n        }, React.createElement(\"div\", {\n          className: controlClassName,\n          onMouseDown: this.handleMouseDown.bind(this),\n          onTouchEnd: this.handleMouseDown.bind(this)\n        }, !noPreview && value || placeholder || \"Select...\", React.createElement(\"span\", {\n          className: \"Dropdown-arrow\"\n        })), menu);\n      }\n    }\n  });\n\n  return Dropdown;\n}(React.Component);\n\nDropdown.defaultProps = {\n  controlClassName: \"Dropdown-control\",\n  menuClassName: \"Dropdown-menu\"\n};\nmodule.exports = Dropdown;","map":null,"metadata":{},"sourceType":"script"}