{"ast":null,"code":"import _classCallCheck from \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/src/components/MapContainer.js\";\nimport React, { Component } from \"react\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport { CurrentLocation } from \"./Map\";\nvar mapStyles = {\n  width: \"100%\",\n  height: \"100%\"\n}; //mapcontainer is responsible for loading google API and demonstare usage\n//Map component is placed inside the container, currently the single feature, CurrentLocation\n\nexport var MapContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MapContainer, _React$Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      showingInfoWindow: false,\n      //hids or shows the info window\n      activeMarker: {},\n      //show active marker upon click\n      selectedPlace: {} //show the infowindow to the selected place upon a marker\n\n    };\n\n    _this.onMarkerClick = function (props, marker, e) {\n      return _this.setState({\n        showingInfoWindow: true,\n        activeMarker: marker,\n        selectedPlace: props\n      });\n    };\n\n    _this.onClose = function (props) {\n      if (_this.state.showingInfoWindow) {\n        _this.setState({\n          showingInfoWindow: false,\n          activeMarker: null,\n          selectedPlace: null\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    // building marker component, we make marker child of map component. We build <Marker/> component as child of the Map so that they are\n    // independent of the Map itself but interdependent if map is available\n    value: function render() {\n      var show_name;\n\n      if (this.state.showingInfoWindow) {\n        show_name = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, this.state.selectedPlace.mapCenter.name_loc));\n      } else {\n        show_name = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, \"\"));\n      }\n\n      return React.createElement(CurrentLocation, {\n        centerAroundCurrentLocation: true,\n        google: this.props.google //placing the map conponent inside the container\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Marker, {\n        onClick: this.onMarkerClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(InfoWindow, {\n        marker: this.state.activeMarker,\n        visible: this.state.showingInfoWindow,\n        onClose: this.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, show_name)));\n    }\n  }]);\n\n  return MapContainer;\n}(React.Component);\nexport default GoogleApiWrapper(function (props) {\n  return {\n    apiKey: \"AIzaSyD8kEdQYnlfJaGYD70GNqtxzf7oet_3wwY\"\n  };\n})(MapContainer);","map":{"version":3,"sources":["/Users/shaila/Downloads/RoadTripAdvisor-develop/RTA-withUI/src/components/MapContainer.js"],"names":["React","Component","GoogleApiWrapper","InfoWindow","Marker","CurrentLocation","mapStyles","width","height","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","e","setState","onClose","show_name","mapCenter","name_loc","google","apiKey"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,MAAvC,QAAqD,mBAArD;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE,MADS;AAEhBC,EAAAA,MAAM,EAAE;AAFQ,CAAlB,C,CAMA;AACA;;AACA,WAAaC,YAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAEEC,KAFF,GAEU;AACNC,MAAAA,iBAAiB,EAAE,KADb;AACoB;AAC1BC,MAAAA,YAAY,EAAE,EAFR;AAEY;AAClBC,MAAAA,aAAa,EAAE,EAHT,CAGY;;AAHZ,KAFV;;AAAA,UAUEC,aAVF,GAUkB,UAACC,KAAD,EAAQC,MAAR,EAAgBC,CAAhB;AAAA,aACd,MAAKC,QAAL,CAAc;AACZP,QAAAA,iBAAiB,EAAE,IADP;AAEZC,QAAAA,YAAY,EAAEI,MAFF;AAGZH,QAAAA,aAAa,EAAEE;AAHH,OAAd,CADc;AAAA,KAVlB;;AAAA,UAkBEI,OAlBF,GAkBY,UAAAJ,KAAK,EAAI;AACjB,UAAI,MAAKL,KAAL,CAAWC,iBAAf,EAAkC;AAChC,cAAKO,QAAL,CAAc;AACZP,UAAAA,iBAAiB,EAAE,KADP;AAEZC,UAAAA,YAAY,EAAE,IAFF;AAGZC,UAAAA,aAAa,EAAE;AAHH,SAAd;AAKD;AACF,KA1BH;;AAAA;AAAA;;AAAA;AAAA;AA4BE;AACA;AA7BF,6BA8BW;AAEP,UAAIO,SAAJ;;AACA,UAAI,KAAKV,KAAL,CAAWC,iBAAf,EAAkC;AAChCS,QAAAA,SAAS,GACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,KAAKV,KAAL,CAAWG,aAAX,CAAyBQ,SAAzB,CAAmCC,QAAxC,CADF,CADF;AAKD,OAND,MAMO;AACLF,QAAAA,SAAS,GACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,EAAL,CADF,CADF;AAKD;;AACD,aAEE,oBAAC,eAAD;AACE,QAAA,2BAA2B,MAD7B;AAEE,QAAA,MAAM,EAAE,KAAKL,KAAL,CAAWQ,MAFrB,CAE6B;AAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKT,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE,oBAAC,UAAD;AACE,QAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWE,YADrB;AAEE,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC,iBAFtB;AAGE,QAAA,OAAO,EAAE,KAAKQ,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMC,SAAN,CALF,CALF,CAFF;AAkBD;AAhEH;;AAAA;AAAA,EAAkCpB,KAAK,CAACC,SAAxC;AAmEA,eAAeC,gBAAgB,CAAC,UAAAa,KAAK;AAAA,SAAK;AACxCS,IAAAA,MAAM,EAAE;AADgC,GAAL;AAAA,CAAN,CAAhB,CAEXf,YAFW,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport { CurrentLocation } from \"./Map\";\n\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\"\n};\n\n\n//mapcontainer is responsible for loading google API and demonstare usage\n//Map component is placed inside the container, currently the single feature, CurrentLocation\nexport class MapContainer extends React.Component {\n\n  state = {\n    showingInfoWindow: false, //hids or shows the info window\n    activeMarker: {}, //show active marker upon click\n    selectedPlace: {} //show the infowindow to the selected place upon a marker\n  };\n  //used to show info window which is a component of google maps react library. Give us the ability for pop up window showing details of\n  //clicked place or marker\n  //prop is a boolean that contrls the infowindow, show -> true, hide->false\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      showingInfoWindow: true,\n      activeMarker: marker,\n      selectedPlace: props\n    });\n\n  //closes the infoWindow once a user clicks the button\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n        selectedPlace: null\n      });\n    }\n  };\n\n  // building marker component, we make marker child of map component. We build <Marker/> component as child of the Map so that they are\n  // independent of the Map itself but interdependent if map is available\n  render() {\n    \n    let show_name;\n    if (this.state.showingInfoWindow) {\n      show_name = (\n        <div>\n          <h4>{this.state.selectedPlace.mapCenter.name_loc}</h4>\n        </div>\n      );\n    } else {\n      show_name = (\n        <div>\n          <h4>{\"\"}</h4>\n        </div>\n      );\n    }\n    return (\n     \n      <CurrentLocation\n        centerAroundCurrentLocation\n        google={this.props.google} //placing the map conponent inside the container\n      >\n        <Marker onClick={this.onMarkerClick} />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>{show_name}</div>\n        </InfoWindow>\n      </CurrentLocation>\n\n\n    );\n  }\n}\n\nexport default GoogleApiWrapper(props => ({\n  apiKey: \"AIzaSyD8kEdQYnlfJaGYD70GNqtxzf7oet_3wwY\",\n}))(MapContainer);\n"]},"metadata":{},"sourceType":"module"}