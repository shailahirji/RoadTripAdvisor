{"ast":null,"code":"import _classCallCheck from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shaila/my-googlemap/src/Map.js\";\n//create component called CurrentLocation where all functionality to pick browsers location lies \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Geocode from 'react-geocode';\nvar mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\nGeocode.setApiKey('AIzaSyD-a_aMfM44H43DL1gkBccsYjcYgZTZWQk');\nexport var CurrentLocation =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CurrentLocation, _React$Component);\n\n  function CurrentLocation(props) {\n    var _this;\n\n    _classCallCheck(this, CurrentLocation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CurrentLocation).call(this, props)); //make it stateful\n\n    var _this$props$initialCe = _this.props.initialCenter,\n        lat = _this$props$initialCe.lat,\n        lng = _this$props$initialCe.lng,\n        name = _this$props$initialCe.name;\n    _this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng,\n        name: name\n      },\n      showingInfoWindow: false\n    };\n    return _this;\n  }\n\n  _createClass(CurrentLocation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.centerAroundCurrentLocation) {\n        if (navigator && navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(function (pos) {\n            var coords = pos.coords;\n\n            _this2.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude,\n                name_loc: Geocode.fromLatLng(coords.latitude, coords.longitude).then(function (response) {\n                  _this2.state.currentLocation.name_loc = response.results[0].formatted_address;\n                }, function (error) {\n                  console.log(error);\n                })\n              }\n            });\n          });\n        }\n      }\n\n      this.loadMap();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.google !== this.props.google) {\n        this.loadMap();\n      }\n\n      if (prevState.currentLocation !== this.state.currentLocation) {\n        this.recenterMap();\n      }\n    }\n  }, {\n    key: \"recenterMap\",\n    value: function recenterMap() {\n      var map = this.map;\n      var current = this.state.currentLocation;\n      var google = this.props.google;\n      var maps = google.maps;\n\n      if (map) {\n        var center = new maps.LatLng(current.lat, current.lng, current.name_loc);\n        map.panTo(center);\n      }\n    } //only called after the component has been rendered and grabs a reference to the DOM component \n\n  }, {\n    key: \"loadMap\",\n    value: function loadMap() {\n      if (this.props && this.props.google) {\n        //check if google is available \n        var google = this.props.google;\n        var maps = google.maps;\n        var mapRef = this.refs.map; //reference to the actual DOM element \n\n        var node = ReactDOM.findDOMNode(mapRef);\n        var zoom = this.props.zoom;\n        var _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng,\n            name = _this$state$currentLo.name;\n        var center = new maps.LatLng(lat, lng, name);\n        var mapConfig = Object.assign({}, {\n          center: center,\n          zoom: zoom\n        });\n        this.map = new maps.Map(node, mapConfig);\n      }\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this3 = this;\n\n      var children = this.props.children;\n      if (!children) return;\n      return React.Children.map(children, function (c) {\n        if (!c) return;\n        return React.cloneElement(c, {\n          map: _this3.map,\n          google: _this3.props.google,\n          mapCenter: _this3.state.currentLocation\n        });\n      });\n    }\n  }, {\n    key: \"initAutocomplete\",\n    value: function initAutocomplete() {\n      var map = new this.google.maps.Map(document.getElementById('map'), {\n        center: {\n          lat: -33.8688,\n          lng: 151.2195\n        },\n        zoom: 13,\n        mapTypeId: 'roadmap'\n      }); // Create the search box and link it to the UI element.\n\n      var input = document.getElementById('pac-input');\n      var searchBox = new this.google.maps.places.SearchBox(input);\n      map.controls[this.google.maps.ControlPosition.TOP_LEFT].push(input); // Bias the SearchBox results towards current map's viewport.\n\n      map.addListener('bounds_changed', function () {\n        searchBox.setBounds(map.getBounds());\n      });\n      var markers = []; // Listen for the event fired when the user selects a prediction and retrieve\n      // more details for that place.\n\n      searchBox.addListener('places_changed', function () {\n        var places = searchBox.getPlaces();\n\n        if (places.length == 0) {\n          return;\n        } // Clear out the old markers.\n\n\n        markers.forEach(function (marker) {\n          marker.setMap(null);\n        });\n        markers = []; // For each place, get the icon, name and location.\n\n        var bounds = new this.google.maps.LatLngBounds();\n        places.forEach(function (place) {\n          if (!place.geometry) {\n            console.log(\"Returned place contains no geometry\");\n            return;\n          }\n\n          var icon = {\n            url: place.icon,\n            size: new this.google.maps.Size(71, 71),\n            origin: new this.google.maps.Point(0, 0),\n            anchor: new this.google.maps.Point(17, 34),\n            scaledSize: new this.google.maps.Size(25, 25)\n          }; // Create a marker for each place.\n\n          markers.push(new this.google.maps.Marker({\n            map: map,\n            icon: icon,\n            title: place.name,\n            position: place.geometry.location\n          }));\n\n          if (place.geometry.viewport) {\n            // Only geocodes have viewport.\n            bounds.union(place.geometry.viewport);\n          } else {\n            bounds.extend(place.geometry.location);\n          }\n        });\n        map.fitBounds(bounds);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = Object.assign({}, mapStyles.map);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: style,\n        ref: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Loading map . . .\"), this.renderChildren());\n    }\n  }]);\n\n  return CurrentLocation;\n}(React.Component);\nexport default CurrentLocation;\nCurrentLocation.defaultProps = {\n  zoom: 20,\n  initialCenter: {\n    lat: 40.723839,\n    lng: -104.105515,\n    name: 'hey'\n  },\n  centerAroundCurrentLocation: false,\n  visible: false\n};","map":{"version":3,"sources":["/Users/shaila/my-googlemap/src/Map.js"],"names":["React","ReactDOM","Geocode","mapStyles","map","position","width","height","setApiKey","CurrentLocation","props","initialCenter","lat","lng","name","state","currentLocation","showingInfoWindow","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","name_loc","fromLatLng","then","response","results","formatted_address","error","console","log","loadMap","prevProps","prevState","google","recenterMap","current","maps","center","LatLng","panTo","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","children","Children","c","cloneElement","mapCenter","document","getElementById","mapTypeId","input","searchBox","places","SearchBox","controls","ControlPosition","TOP_LEFT","push","addListener","setBounds","getBounds","markers","getPlaces","length","forEach","marker","setMap","bounds","LatLngBounds","place","geometry","icon","url","size","Size","origin","Point","anchor","scaledSize","Marker","title","location","viewport","union","extend","fitBounds","style","renderChildren","Component","defaultProps","visible"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,IAAMC,SAAS,GAAC;AACZC,EAAAA,GAAG,EAAC;AACAC,IAAAA,QAAQ,EAAE,UADV;AAEAC,IAAAA,KAAK,EAAC,MAFN;AAGAC,IAAAA,MAAM,EAAE;AAHR;AADQ,CAAhB;AAQAL,OAAO,CAACM,SAAR,CAAkB,yCAAlB;AAEA,WAAaC,eAAb;AAAA;AAAA;AAAA;;AACI,2BAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,yFAAMA,KAAN,GADc,CACD;;AADC,gCAEO,MAAKA,KAAL,CAAWC,aAFlB;AAAA,QAEPC,GAFO,yBAEPA,GAFO;AAAA,QAEHC,GAFG,yBAEHA,GAFG;AAAA,QAECC,IAFD,yBAECA,IAFD;AAGd,UAAKC,KAAL,GAAW;AACPC,MAAAA,eAAe,EAAC;AACZJ,QAAAA,GAAG,EAAEA,GADO;AAEZC,QAAAA,GAAG,EAACA,GAFQ;AAGZC,QAAAA,IAAI,EAACA;AAHO,OADT;AAMPG,MAAAA,iBAAiB,EAAC;AANX,KAAX;AAHc;AAWjB;;AAZL;AAAA;AAAA,wCAcuB;AAAA;;AACf,UAAG,KAAKP,KAAL,CAAWQ,2BAAd,EAA0C;AACtC,YAAGC,SAAS,IAAIA,SAAS,CAACC,WAA1B,EAAsC;AAClCD,UAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAAAC,GAAG,EAAG;AAC3C,gBAAMC,MAAM,GAAED,GAAG,CAACC,MAAlB;;AACA,YAAA,MAAI,CAACC,QAAL,CAAc;AACVR,cAAAA,eAAe,EAAC;AACZJ,gBAAAA,GAAG,EAAEW,MAAM,CAACE,QADA;AAEZZ,gBAAAA,GAAG,EAACU,MAAM,CAACG,SAFC;AAGZC,gBAAAA,QAAQ,EAAGzB,OAAO,CAAC0B,UAAR,CAAmBL,MAAM,CAACE,QAA1B,EAAmCF,MAAM,CAACG,SAA1C,EAAqDG,IAArD,CACP,UAAAC,QAAQ,EAAE;AACN,kBAAA,MAAI,CAACf,KAAL,CAAWC,eAAX,CAA2BW,QAA3B,GAAoCG,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBC,iBAAxD;AACH,iBAHM,EAIP,UAAAC,KAAK,EAAG;AACJC,kBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,iBANM;AAHC;AADN,aAAd;AAcH,WAhBD;AAkBH;AACJ;;AACD,WAAKG,OAAL;AACH;AAtCL;AAAA;AAAA,uCAwCuBC,SAxCvB,EAwCiCC,SAxCjC,EAwC2C;AACnC,UAAGD,SAAS,CAACE,MAAV,KAAoB,KAAK7B,KAAL,CAAW6B,MAAlC,EAAyC;AACrC,aAAKH,OAAL;AACH;;AACD,UAAGE,SAAS,CAACtB,eAAV,KAA8B,KAAKD,KAAL,CAAWC,eAA5C,EAA4D;AACxD,aAAKwB,WAAL;AACH;AACJ;AA/CL;AAAA;AAAA,kCAiDiB;AACT,UAAMpC,GAAG,GAAC,KAAKA,GAAf;AACA,UAAMqC,OAAO,GAAE,KAAK1B,KAAL,CAAWC,eAA1B;AAEA,UAAMuB,MAAM,GAAC,KAAK7B,KAAL,CAAW6B,MAAxB;AACA,UAAMG,IAAI,GAACH,MAAM,CAACG,IAAlB;;AAEA,UAAGtC,GAAH,EAAO;AACH,YAAIuC,MAAM,GAAC,IAAID,IAAI,CAACE,MAAT,CAAgBH,OAAO,CAAC7B,GAAxB,EAA4B6B,OAAO,CAAC5B,GAApC,EAAwC4B,OAAO,CAACd,QAAhD,CAAX;AACAvB,QAAAA,GAAG,CAACyC,KAAJ,CAAUF,MAAV;AACH;AACJ,KA5DL,CA+DI;;AA/DJ;AAAA;AAAA,8BAgEa;AAEL,UAAG,KAAKjC,KAAL,IAAc,KAAKA,KAAL,CAAW6B,MAA5B,EAAmC;AAC/B;AAD+B,YAEzBA,MAFyB,GAEjB,KAAK7B,KAFY,CAEzB6B,MAFyB;AAG/B,YAAMG,IAAI,GAACH,MAAM,CAACG,IAAlB;AACA,YAAMI,MAAM,GAAC,KAAKC,IAAL,CAAU3C,GAAvB,CAJ+B,CAM/B;;AACA,YAAM4C,IAAI,GAAC/C,QAAQ,CAACgD,WAAT,CAAqBH,MAArB,CAAX;AAP+B,YAS3BI,IAT2B,GASrB,KAAKxC,KATgB,CAS3BwC,IAT2B;AAAA,oCAUX,KAAKnC,KAAL,CAAWC,eAVA;AAAA,YAUzBJ,GAVyB,yBAUzBA,GAVyB;AAAA,YAUrBC,GAVqB,yBAUrBA,GAVqB;AAAA,YAUjBC,IAViB,yBAUjBA,IAViB;AAW/B,YAAM6B,MAAM,GAAE,IAAID,IAAI,CAACE,MAAT,CAAgBhC,GAAhB,EAAoBC,GAApB,EAAwBC,IAAxB,CAAd;AACA,YAAMqC,SAAS,GAACC,MAAM,CAACC,MAAP,CACZ,EADY,EAEZ;AACIV,UAAAA,MAAM,EAACA,MADX;AAEIO,UAAAA,IAAI,EAACA;AAFT,SAFY,CAAhB;AAOA,aAAK9C,GAAL,GAAU,IAAIsC,IAAI,CAACY,GAAT,CAAaN,IAAb,EAAkBG,SAAlB,CAAV;AACH;AACJ;AAvFL;AAAA;AAAA,qCAyFoB;AAAA;;AAAA,UACLI,QADK,GACK,KAAK7C,KADV,CACL6C,QADK;AAGZ,UAAG,CAACA,QAAJ,EAAc;AAEd,aAAOvD,KAAK,CAACwD,QAAN,CAAepD,GAAf,CAAmBmD,QAAnB,EAA6B,UAAAE,CAAC,EAAE;AACnC,YAAG,CAACA,CAAJ,EAAO;AACP,eAAOzD,KAAK,CAAC0D,YAAN,CAAmBD,CAAnB,EAAqB;AACxBrD,UAAAA,GAAG,EAAE,MAAI,CAACA,GADc;AAExBmC,UAAAA,MAAM,EAAC,MAAI,CAAC7B,KAAL,CAAW6B,MAFM;AAGxBoB,UAAAA,SAAS,EAAE,MAAI,CAAC5C,KAAL,CAAWC;AAHE,SAArB,CAAP;AAKH,OAPM,CAAP;AAQH;AAtGL;AAAA;AAAA,uCAwGwB;AAChB,UAAIZ,GAAG,GAAG,IAAI,KAAKmC,MAAL,CAAYG,IAAZ,CAAiBY,GAArB,CAAyBM,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAzB,EAAyD;AACjElB,QAAAA,MAAM,EAAE;AAAC/B,UAAAA,GAAG,EAAE,CAAC,OAAP;AAAgBC,UAAAA,GAAG,EAAE;AAArB,SADyD;AAEjEqC,QAAAA,IAAI,EAAE,EAF2D;AAGjEY,QAAAA,SAAS,EAAE;AAHsD,OAAzD,CAAV,CADgB,CAOhB;;AACA,UAAIC,KAAK,GAAGH,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAZ;AACA,UAAIG,SAAS,GAAG,IAAI,KAAKzB,MAAL,CAAYG,IAAZ,CAAiBuB,MAAjB,CAAwBC,SAA5B,CAAsCH,KAAtC,CAAhB;AACA3D,MAAAA,GAAG,CAAC+D,QAAJ,CAAa,KAAK5B,MAAL,CAAYG,IAAZ,CAAiB0B,eAAjB,CAAiCC,QAA9C,EAAwDC,IAAxD,CAA6DP,KAA7D,EAVgB,CAYhB;;AACA3D,MAAAA,GAAG,CAACmE,WAAJ,CAAgB,gBAAhB,EAAkC,YAAW;AAC3CP,QAAAA,SAAS,CAACQ,SAAV,CAAoBpE,GAAG,CAACqE,SAAJ,EAApB;AACD,OAFD;AAIA,UAAIC,OAAO,GAAG,EAAd,CAjBgB,CAkBhB;AACA;;AACAV,MAAAA,SAAS,CAACO,WAAV,CAAsB,gBAAtB,EAAwC,YAAW;AACjD,YAAIN,MAAM,GAAGD,SAAS,CAACW,SAAV,EAAb;;AAEA,YAAIV,MAAM,CAACW,MAAP,IAAiB,CAArB,EAAwB;AACtB;AACD,SALgD,CAOjD;;;AACAF,QAAAA,OAAO,CAACG,OAAR,CAAgB,UAASC,MAAT,EAAiB;AAC/BA,UAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD,SAFD;AAGAL,QAAAA,OAAO,GAAG,EAAV,CAXiD,CAajD;;AACA,YAAIM,MAAM,GAAG,IAAI,KAAKzC,MAAL,CAAYG,IAAZ,CAAiBuC,YAArB,EAAb;AACAhB,QAAAA,MAAM,CAACY,OAAP,CAAe,UAASK,KAAT,EAAgB;AAC7B,cAAI,CAACA,KAAK,CAACC,QAAX,EAAqB;AACnBjD,YAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACA;AACD;;AACD,cAAIiD,IAAI,GAAG;AACTC,YAAAA,GAAG,EAAEH,KAAK,CAACE,IADF;AAETE,YAAAA,IAAI,EAAE,IAAI,KAAK/C,MAAL,CAAYG,IAAZ,CAAiB6C,IAArB,CAA0B,EAA1B,EAA8B,EAA9B,CAFG;AAGTC,YAAAA,MAAM,EAAE,IAAI,KAAKjD,MAAL,CAAYG,IAAZ,CAAiB+C,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAHC;AAITC,YAAAA,MAAM,EAAE,IAAI,KAAKnD,MAAL,CAAYG,IAAZ,CAAiB+C,KAArB,CAA2B,EAA3B,EAA+B,EAA/B,CAJC;AAKTE,YAAAA,UAAU,EAAE,IAAI,KAAKpD,MAAL,CAAYG,IAAZ,CAAiB6C,IAArB,CAA0B,EAA1B,EAA8B,EAA9B;AALH,WAAX,CAL6B,CAa7B;;AACAb,UAAAA,OAAO,CAACJ,IAAR,CAAa,IAAI,KAAK/B,MAAL,CAAYG,IAAZ,CAAiBkD,MAArB,CAA4B;AACvCxF,YAAAA,GAAG,EAAEA,GADkC;AAEvCgF,YAAAA,IAAI,EAAEA,IAFiC;AAGvCS,YAAAA,KAAK,EAAEX,KAAK,CAACpE,IAH0B;AAIvCT,YAAAA,QAAQ,EAAE6E,KAAK,CAACC,QAAN,CAAeW;AAJc,WAA5B,CAAb;;AAOA,cAAIZ,KAAK,CAACC,QAAN,CAAeY,QAAnB,EAA6B;AAC3B;AACAf,YAAAA,MAAM,CAACgB,KAAP,CAAad,KAAK,CAACC,QAAN,CAAeY,QAA5B;AACD,WAHD,MAGO;AACLf,YAAAA,MAAM,CAACiB,MAAP,CAAcf,KAAK,CAACC,QAAN,CAAeW,QAA7B;AACD;AACF,SA3BD;AA4BA1F,QAAAA,GAAG,CAAC8F,SAAJ,CAAclB,MAAd;AACD,OA5CD;AA6CD;AAzKP;AAAA;AAAA,6BA2KY;AACJ,UAAMmB,KAAK,GAAC/C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBlD,SAAS,CAACC,GAA3B,CAAZ;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,KAAK,EAAE+F,KAAZ;AAAmB,QAAA,GAAG,EAAC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,EAIK,KAAKC,cAAL,EAJL,CADJ;AAQH;AArLL;;AAAA;AAAA,EAAqCpG,KAAK,CAACqG,SAA3C;AAyLA,eAAe5F,eAAf;AAEAA,eAAe,CAAC6F,YAAhB,GAA6B;AACzBpD,EAAAA,IAAI,EAAC,EADoB;AAEzBvC,EAAAA,aAAa,EAAC;AACVC,IAAAA,GAAG,EAAC,SADM;AAEVC,IAAAA,GAAG,EAAE,CAAC,UAFI;AAGVC,IAAAA,IAAI,EAAC;AAHK,GAFW;AAOzBI,EAAAA,2BAA2B,EAAC,KAPH;AAQzBqF,EAAAA,OAAO,EAAC;AARiB,CAA7B","sourcesContent":["//create component called CurrentLocation where all functionality to pick browsers location lies \nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Geocode from 'react-geocode'\n\nconst mapStyles={\n    map:{\n        position :'absolute',\n        width:'100%',\n        height: '100%'\n    }\n};\n\nGeocode.setApiKey('AIzaSyD-a_aMfM44H43DL1gkBccsYjcYgZTZWQk');\n\nexport class CurrentLocation extends React.Component{\n    constructor(props){\n        super(props);//make it stateful\n        const {lat,lng,name}=this.props.initialCenter;\n        this.state={\n            currentLocation:{\n                lat: lat,\n                lng:lng,\n                name:name\n            },\n            showingInfoWindow:false\n        };\n    }\n \n    componentDidMount(){\n        if(this.props.centerAroundCurrentLocation){\n            if(navigator && navigator.geolocation){\n                navigator.geolocation.getCurrentPosition(pos =>{\n                    const coords= pos.coords;\n                    this.setState({\n                        currentLocation:{\n                            lat: coords.latitude,\n                            lng:coords.longitude,\n                            name_loc:  Geocode.fromLatLng(coords.latitude,coords.longitude).then(\n                                response=>{\n                                    this.state.currentLocation.name_loc=response.results[0].formatted_address;   \n                                },\n                                error =>{\n                                    console.log(error);\n                                }\n                            )\n                        }\n                    });\n                });\n                \n            }\n        }\n        this.loadMap();\n    }\n\n    componentDidUpdate(prevProps,prevState){\n        if(prevProps.google!== this.props.google){\n            this.loadMap();\n        }\n        if(prevState.currentLocation !== this.state.currentLocation){\n            this.recenterMap();\n        }\n    }\n\n    recenterMap(){\n        const map=this.map;\n        const current =this.state.currentLocation;\n\n        const google=this.props.google;\n        const maps=google.maps;\n\n        if(map){\n            let center=new maps.LatLng(current.lat,current.lng,current.name_loc);\n            map.panTo(center);\n        }\n    }\n\n\n    //only called after the component has been rendered and grabs a reference to the DOM component \n    loadMap(){\n        \n        if(this.props && this.props.google){\n            //check if google is available \n            const{google}=this.props;\n            const maps=google.maps;\n            const mapRef=this.refs.map;\n\n            //reference to the actual DOM element \n            const node=ReactDOM.findDOMNode(mapRef);\n\n            let{zoom}=this.props;\n            const{lat,lng,name}=this.state.currentLocation;\n            const center= new maps.LatLng(lat,lng,name);\n            const mapConfig=Object.assign(\n                {},\n                {\n                    center:center,\n                    zoom:zoom\n                }\n            );\n            this.map= new maps.Map(node,mapConfig);\n        }\n    }\n\n    renderChildren(){\n        const {children}=this.props;\n\n        if(!children) return;\n\n        return React.Children.map(children, c=>{\n            if(!c) return;\n            return React.cloneElement(c,{\n                map: this.map,\n                google:this.props.google,\n                mapCenter: this.state.currentLocation\n            });\n        });\n    }\n\n     initAutocomplete() {\n        var map = new this.google.maps.Map(document.getElementById('map'), {\n          center: {lat: -33.8688, lng: 151.2195},\n          zoom: 13,\n          mapTypeId: 'roadmap'\n        });\n      \n        // Create the search box and link it to the UI element.\n        var input = document.getElementById('pac-input');\n        var searchBox = new this.google.maps.places.SearchBox(input);\n        map.controls[this.google.maps.ControlPosition.TOP_LEFT].push(input);\n      \n        // Bias the SearchBox results towards current map's viewport.\n        map.addListener('bounds_changed', function() {\n          searchBox.setBounds(map.getBounds());\n        });\n      \n        var markers = [];\n        // Listen for the event fired when the user selects a prediction and retrieve\n        // more details for that place.\n        searchBox.addListener('places_changed', function() {\n          var places = searchBox.getPlaces();\n      \n          if (places.length == 0) {\n            return;\n          }\n      \n          // Clear out the old markers.\n          markers.forEach(function(marker) {\n            marker.setMap(null);\n          });\n          markers = [];\n      \n          // For each place, get the icon, name and location.\n          var bounds = new this.google.maps.LatLngBounds();\n          places.forEach(function(place) {\n            if (!place.geometry) {\n              console.log(\"Returned place contains no geometry\");\n              return;\n            }\n            var icon = {\n              url: place.icon,\n              size: new this.google.maps.Size(71, 71),\n              origin: new this.google.maps.Point(0, 0),\n              anchor: new this.google.maps.Point(17, 34),\n              scaledSize: new this.google.maps.Size(25, 25)\n            };\n      \n            // Create a marker for each place.\n            markers.push(new this.google.maps.Marker({\n              map: map,\n              icon: icon,\n              title: place.name,\n              position: place.geometry.location\n            }));\n      \n            if (place.geometry.viewport) {\n              // Only geocodes have viewport.\n              bounds.union(place.geometry.viewport);\n            } else {\n              bounds.extend(place.geometry.location);\n            }\n          });\n          map.fitBounds(bounds);\n        });\n      }\n\n    render(){\n        const style=Object.assign({},mapStyles.map);\n        return(\n            <div>\n                <div style={style} ref=\"map\">\n                Loading map . . .\n                </div>\n                {this.renderChildren()}\n            </div>\n        );\n    }\n    \n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps={\n    zoom:20,\n    initialCenter:{\n        lat:40.723839,\n        lng: -104.105515,\n        name:'hey'\n    },\n    centerAroundCurrentLocation:false,\n    visible:false\n};"]},"metadata":{},"sourceType":"module"}