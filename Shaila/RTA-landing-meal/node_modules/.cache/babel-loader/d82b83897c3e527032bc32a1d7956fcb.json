{"ast":null,"code":"import _classCallCheck from \"/Users/shaila/Documents/GitHub/RoadTripAdvisor/Beverly/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shaila/Documents/GitHub/RoadTripAdvisor/Beverly/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shaila/Documents/GitHub/RoadTripAdvisor/Beverly/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shaila/Documents/GitHub/RoadTripAdvisor/Beverly/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shaila/Documents/GitHub/RoadTripAdvisor/Beverly/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Users/shaila/Documents/GitHub/RoadTripAdvisor/Beverly/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/shaila/Documents/GitHub/RoadTripAdvisor/Beverly/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shaila/Documents/GitHub/RoadTripAdvisor/Beverly/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/shaila/Documents/GitHub/RoadTripAdvisor/Beverly/src/components/MealMap.js\";\n\n/*global google*/\nimport React from \"react\";\nimport { compose, withProps, withHandlers, withState, withStateHandlers, lifecycle } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow, DirectionsRenderer } from \"react-google-maps\";\nimport { connect } from 'react-redux';\nimport meal from './meal.png';\nimport bakery from './bakery.png';\nvar MyMapComponent = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyD8kEdQYnlfJaGYD70GNqtxzf7oet_3wwY&libraries=places,geometry\",\n  loadingElement: React.createElement(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }),\n  containerElement: React.createElement(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }),\n  mapElement: React.createElement(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"50%\",\n      height: 480,\n      //WebkitFilter: \"drop-shadow(0px 0px 30px )\",\n      marginLeft: 482,\n      marginTop: -510\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })\n}), withScriptjs, withGoogleMap, lifecycle({\n  componentWillMount: function componentWillMount() {\n    this.getGeoLocation();\n  },\n  getGeoLocation: function () {\n    var _getGeoLocation = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var locations, markers, from, to;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.props.locations) {\n                _context.next = 12;\n                break;\n              }\n\n              locations = this.props.locations;\n              markers = [];\n              _context.next = 5;\n              return this.getLocationCoordinates(locations.from);\n\n            case 5:\n              from = _context.sent;\n              _context.next = 8;\n              return this.getLocationCoordinates(locations.to);\n\n            case 8:\n              to = _context.sent;\n              markers.push(from);\n              markers.push(to);\n              this.setState({\n                markers: markers\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getGeoLocation() {\n      return _getGeoLocation.apply(this, arguments);\n    }\n\n    return getGeoLocation;\n  }(),\n  getLocationCoordinates: function getLocationCoordinates(location) {\n    return new Promise(function (resolve, reject) {\n      var geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({\n        address: location\n      }, function (result, status) {\n        if (status == 'OK') {\n          var geometry = result[0].geometry.location;\n          var coordinates = {\n            lat: geometry.lat(),\n            lng: geometry.lng()\n          };\n          resolve(coordinates);\n        } else {\n          reject('ERROR');\n        }\n      });\n    });\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    var DirectionsService = new google.maps.DirectionsService();\n    DirectionsService.route({\n      origin: new google.maps.LatLng(47.6769683, -122.0284808),\n      destination: new google.maps.LatLng(49.2827, -123.1207),\n      travelMode: google.maps.TravelMode.DRIVING\n    }, function (result, status) {\n      if (status === google.maps.DirectionsStatus.OK) {\n        //console.log(result)\n        _this.setState({\n          directions: _objectSpread({}, result),\n          markers: true\n        });\n      } else {\n        console.error(\"error fetching directions \".concat(result));\n      }\n    });\n  }\n}), withState('places', 'updatePlaces', '', 'searchCriteria', 'radius', 'currLat', 'currLng'), withStateHandlers(function () {\n  return {\n    isOpen: false,\n    markerIndex: 0,\n    currentLatLng: {\n      lat: 47.6769683,\n      lng: -90.6769683\n    }\n  };\n}, {\n  onToggleOpen: function onToggleOpen(_ref) {\n    var isOpen = _ref.isOpen;\n    return function (index) {\n      return {\n        isOpen: !isOpen,\n        markerIndex: index\n      };\n    };\n  }\n}), withHandlers(function () {\n  var refs = {\n    map: undefined,\n    array: []\n  };\n  return {\n    onMapMounted: function onMapMounted() {\n      return function (ref) {\n        refs.map = ref;\n      };\n    },\n    fetchPlaces: function () {\n      var _fetchPlaces = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref2) {\n        var updatePlaces, searchCriteria, radius, price, review, defaultCenter, bounds, maxPrice, service, x, output, request;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                updatePlaces = _ref2.updatePlaces, searchCriteria = _ref2.searchCriteria, radius = _ref2.radius, price = _ref2.price, review = _ref2.review, defaultCenter = _ref2.defaultCenter;\n                bounds = refs.map.getBounds();\n                refs.array = searchCriteria;\n                maxPrice = price;\n                service = new google.maps.places.PlacesService(refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\n                output = [];\n                x = 0;\n\n              case 7:\n                if (!(x < refs.array.length)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                request = {\n                  location: defaultCenter,\n                  //location:(new google.maps.LatLng(47.6769683,-122.0284808)),or {lat:47.6769683,lng:-122.0284808}\n                  bounds: bounds,\n                  radius: radius,\n                  type: refs.array[x],\n                  openNow: true,\n                  maxPriceLevel: maxPrice,\n                  fields: ['photos', 'formatted_address', 'name', 'rating', 'opening_hours', 'geometry']\n                };\n                _context2.next = 11;\n                return service.nearbySearch(request, function (results, status) {\n                  return new Promise(function (reject, resolve) {\n                    if (status === google.maps.places.PlacesServiceStatus.OK) {\n                      var x;\n\n                      for (x = 0; x < results.length; x++) {\n                        output.push(results[x]);\n                      }\n\n                      resolve(output);\n                      updatePlaces(output);\n                    } else {\n                      reject();\n                    }\n                  });\n                });\n\n              case 11:\n                x++;\n                _context2.next = 7;\n                break;\n\n              case 14:\n                //end of forloop \n                console.log(output);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetchPlaces(_x) {\n        return _fetchPlaces.apply(this, arguments);\n      }\n\n      return fetchPlaces;\n    }(),\n    currentLoc: function currentLoc(_ref3) {\n      var currLat = _ref3.currLat,\n          currLng = _ref3.currLng;\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          currLat = position.coords.latitude;\n          currLng = position.coords.longitude;\n        });\n      }\n    }\n  };\n}))(function (props) {\n  if (props.places != null) var target = new google.maps.LatLng(47.6769683, -122.0284808); //this needs to update with the bound and not be fixed like this\n\n  if (props.defaultCenter !== undefined) {\n    target = props.defaultCenter;\n  }\n\n  var option = []; //new array to store results based on search criteria\n\n  if (props.places) {\n    //traverse through the place array, if there is a match between radius , price level. Enables makers to show without other information \n    props.places.map(function (place, i) {\n      if (google.maps.geometry.spherical.computeDistanceBetween(target, new google.maps.LatLng(place.geometry.location.lat(), place.geometry.location.lng())) < props.radius) {\n        option.push(place);\n      }\n\n      if (place.price_level <= props.price) {\n        option.push(place);\n      }\n      /*\n      cant have any markers appear if user enters only type, we need more information along with type. \n      */\n      // if(place.types.length !== 0 && place.types.includes(props.searchCriteria)){ \n      //     console.log(\"here \"+props.searchCriteria)\n      //     option.push(place)\n      // }\n\n    });\n  }\n\n  console.log(option);\n  return React.createElement(GoogleMap, {\n    onTilesLoaded: props.fetchPlaces,\n    ref: props.onMapMounted,\n    onClick: props.fetchPlaces,\n    defaultZoom: 13,\n    defaultCenter: {\n      lat: 47.6769683,\n      lng: -122.0284808\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, option && option.map(function (place, i) {\n    return React.createElement(Marker, {\n      key: i,\n      position: {\n        lat: place.geometry.location.lat(),\n        lng: place.geometry.location.lng()\n      },\n      onClick: function onClick() {\n        props.onToggleOpen(i);\n      },\n      icon: {\n        url: place.icon,\n        scaledSize: new google.maps.Size(15, 25)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, props.isOpen && props.markerIndex === i && React.createElement(InfoWindow, {\n      onCloseClick: props.onToggleOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, place.name)));\n  }), props.directions && React.createElement(DirectionsRenderer, {\n    directions: props.directions,\n    suppressMarkers: props.markers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }));\n});\n\nvar MealMap =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MealMap, _React$Component);\n\n  function MealMap() {\n    _classCallCheck(this, MealMap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MealMap).apply(this, arguments));\n  }\n\n  _createClass(MealMap, [{\n    key: \"render\",\n    value: function render() {\n      var searchCriteria = this.props.search;\n      var radius = this.props.radius;\n      var price = this.props.price;\n      var ratings = this.props.reviews;\n      var types = [];\n      var locations = this.props.locations;\n\n      if (searchCriteria.length !== 0 || radius !== 0 || price !== 0) {\n        console.log(searchCriteria + \" \" + radius + \" \" + price + \" \" + ratings);\n        searchCriteria.map(function (select) {\n          types.push(select.label);\n        });\n        return React.createElement(MyMapComponent, {\n          searchCriteria: types,\n          price: price * 1,\n          review: ratings,\n          radius: radius * 1609 //converting into meters\n          ,\n          locations: locations,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250\n          },\n          __self: this\n        });\n      }\n\n      return (//to prevent from crashing\n        React.createElement(MyMapComponent, {\n          searchCriteria: \"\",\n          price: \"any\",\n          review: \"any\",\n          radius: \"0\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        })\n      );\n    }\n  }]);\n\n  return MealMap;\n}(React.Component);\n\nexport { MealMap as default };","map":{"version":3,"sources":["/Users/shaila/Documents/GitHub/RoadTripAdvisor/Beverly/src/components/MealMap.js"],"names":["React","compose","withProps","withHandlers","withState","withStateHandlers","lifecycle","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","DirectionsRenderer","connect","meal","bakery","MyMapComponent","googleMapURL","loadingElement","height","containerElement","mapElement","position","width","marginLeft","marginTop","componentWillMount","getGeoLocation","props","locations","markers","getLocationCoordinates","from","to","push","setState","location","Promise","resolve","reject","geocoder","window","google","maps","Geocoder","geocode","address","result","status","geometry","coordinates","lat","lng","componentDidMount","DirectionsService","route","origin","LatLng","destination","travelMode","TravelMode","DRIVING","DirectionsStatus","OK","directions","console","error","isOpen","markerIndex","currentLatLng","onToggleOpen","index","refs","map","undefined","array","onMapMounted","ref","fetchPlaces","updatePlaces","searchCriteria","radius","price","review","defaultCenter","bounds","getBounds","maxPrice","service","places","PlacesService","context","__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","output","x","length","request","type","openNow","maxPriceLevel","fields","nearbySearch","results","PlacesServiceStatus","log","currentLoc","currLat","currLng","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","target","option","place","i","spherical","computeDistanceBetween","price_level","url","icon","scaledSize","Size","name","MealMap","search","ratings","reviews","types","select","label","Component"],"mappings":"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","sourcesContent":["/*global google*/\nimport React from \"react\"\nimport { compose, withProps, withHandlers, withState, withStateHandlers, lifecycle } from \"recompose\"\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow, DirectionsRenderer } from \"react-google-maps\"\nimport { connect } from 'react-redux'\nimport meal from './meal.png'\nimport bakery from './bakery.png'\n\nconst MyMapComponent = compose(\n\n    withProps(\n        {\n            googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyD8kEdQYnlfJaGYD70GNqtxzf7oet_3wwY&libraries=places,geometry\",\n            loadingElement: <div style={{ height: '100vh' }} />,\n            containerElement: <div style={{ height: '100vh' }} />,\n            mapElement: <div style={{\n                position: \"relative\",\n                width: \"50%\",\n                height: 480,\n                //WebkitFilter: \"drop-shadow(0px 0px 30px )\",\n                marginLeft: 482,\n                marginTop: -510\n            }}\n            />,\n        }),\n    withScriptjs,\n    withGoogleMap,\n    lifecycle({\n        componentWillMount(){\n            this.getGeoLocation()\n        },\n        async getGeoLocation(){\n            if(this.props.locations ){\n              const locations = this.props.locations;\n              const markers = [];\n            const from = await this.getLocationCoordinates(locations.from);\n            const to = await this.getLocationCoordinates(locations.to);\n            markers.push(from);\n            markers.push(to);\n             this.setState({markers:markers})\n            }\n          },\n    \n          getLocationCoordinates(location){\n            return new Promise((resolve, reject)=>{\n              const geocoder = new window.google.maps.Geocoder();\n              geocoder.geocode({address:location}, (result, status)=>{\n                if(status=='OK'){\n                  const geometry = result[0].geometry.location\n                  const coordinates = {\n                    lat: geometry.lat(),\n                    lng:geometry.lng()\n                  }\n                  resolve(coordinates);\n                 \n                }\n                else{\n                  reject('ERROR')\n                }\n              })\n              \n            });\n          \n          },\n        componentDidMount() {\n            const DirectionsService = new google.maps.DirectionsService();\n            DirectionsService.route({\n                origin: new google.maps.LatLng(47.6769683, -122.0284808),\n                destination: new google.maps.LatLng(49.2827, -123.1207),\n                travelMode: google.maps.TravelMode.DRIVING,\n            }, (result, status) => {\n                if (status === google.maps.DirectionsStatus.OK) {\n                    //console.log(result)\n                    this.setState({\n                        directions: { ...result },\n                        markers: true\n                    })\n                } else {\n                    console.error(`error fetching directions ${result}`);\n                }\n            });\n        }\n    }),\n    withState('places', 'updatePlaces', '', 'searchCriteria', 'radius', 'currLat', 'currLng'),\n    withStateHandlers(() => ({\n        isOpen: false,\n        markerIndex: 0,\n        currentLatLng: {\n            lat: 47.6769683, lng: -90.6769683\n        }\n    }), {\n            onToggleOpen: ({ isOpen }) => (index) => ({\n                isOpen: !isOpen,\n                markerIndex: index\n            })\n        },\n    ),\n    withHandlers(() => {\n        const refs = {\n            map: undefined,\n            array: []\n        }\n        return {\n            onMapMounted: () => ref => {\n                refs.map = ref\n            },\n            fetchPlaces: async ({ updatePlaces, searchCriteria, radius, price, review, defaultCenter }) => {\n                const bounds = refs.map.getBounds();\n                refs.array = searchCriteria\n                var maxPrice = price;\n                const service = new google.maps.places.PlacesService(refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\n                var x;\n                var output = [];\n\n                for (x = 0; x < refs.array.length; x++) {\n                    var request = {\n                        location: defaultCenter,//location:(new google.maps.LatLng(47.6769683,-122.0284808)),or {lat:47.6769683,lng:-122.0284808}\n                        bounds: bounds,\n                        radius: radius,\n                        type: refs.array[x],\n                        openNow: true,\n                        maxPriceLevel: maxPrice,\n                        fields: ['photos', 'formatted_address', 'name', 'rating', 'opening_hours', 'geometry']\n                    };\n\n                    await service.nearbySearch(request, (results, status) => {\n\n                        return new Promise((reject, resolve) => {\n                            if (status === google.maps.places.PlacesServiceStatus.OK) {\n                                var x;\n                                for (x = 0; x < results.length; x++)\n                                    output.push(results[x]);\n\n                                resolve(output);\n                                updatePlaces(output);\n                            } else {\n                                reject();\n                            }\n                        })\n\n                    })\n\n                } //end of forloop \n\n                console.log(output);\n            },\n            currentLoc: ({ currLat, currLng }) => {\n                if (navigator.geolocation) {\n                    navigator.geolocation.getCurrentPosition(\n                        position => {\n                            currLat = position.coords.latitude\n                            currLng = position.coords.longitude\n                        })\n\n                }\n\n            }\n        }\n    }),\n)((props) => {\n\n    if (props.places != null)\n\n        var target = new google.maps.LatLng(47.6769683, -122.0284808); //this needs to update with the bound and not be fixed like this\n    if (props.defaultCenter !== undefined) {\n        target = props.defaultCenter\n    }\n    var option = []; //new array to store results based on search criteria\n    if (props.places) {\n\n        //traverse through the place array, if there is a match between radius , price level. Enables makers to show without other information \n        props.places.map((place, i) => {\n            if (google.maps.geometry.spherical.computeDistanceBetween(target, new google.maps.LatLng(place.geometry.location.lat(), place.geometry.location.lng())) < props.radius) {\n\n                option.push(place);\n            }\n            if (place.price_level <= props.price) {\n                option.push(place)\n            }\n\n            /*\n            cant have any markers appear if user enters only type, we need more information along with type. \n            */\n            // if(place.types.length !== 0 && place.types.includes(props.searchCriteria)){ \n            //     console.log(\"here \"+props.searchCriteria)\n            //     option.push(place)\n\n            // }\n\n\n        }\n        )\n    }\n\n\n    console.log(option);\n    return (\n\n        <GoogleMap\n            onTilesLoaded={props.fetchPlaces}\n            ref={props.onMapMounted}\n            onClick={props.fetchPlaces}\n            defaultZoom={13}\n            defaultCenter={{ lat: 47.6769683, lng: -122.0284808 }}\n        >\n            {option && option.map((place, i) =>\n\n                <Marker key={i} position={{ lat: place.geometry.location.lat(), lng: place.geometry.location.lng() }}\n                    onClick={() => { props.onToggleOpen(i) }} icon={{ url: place.icon, scaledSize: new google.maps.Size(15, 25) }} >\n                    {props.isOpen && props.markerIndex === i &&\n                        <InfoWindow onCloseClick={props.onToggleOpen}>\n                            <div>{place.name}</div>\n                        </InfoWindow>\n                    }\n                </Marker>\n\n            )}\n            {/*for creating path with the updated coordinates*/}\n\n            {props.directions && <DirectionsRenderer directions={props.directions} suppressMarkers={props.markers} />}\n\n        </GoogleMap>\n\n    )\n\n})\n\nexport default class MealMap extends React.Component {\n\n\n    render() {\n\n        var searchCriteria = this.props.search;\n        var radius = this.props.radius;\n        var price = this.props.price;\n        var ratings = this.props.reviews;\n        var types = [];\n        var locations=this.props.locations;\n\n\n        if (searchCriteria.length !== 0 || radius !== 0 || price !== 0) {\n            console.log(searchCriteria + \" \" + radius + \" \" + price + \" \" + ratings)\n\n\n            searchCriteria.map(select => {\n                types.push(select.label)\n            })\n\n            return (\n                <MyMapComponent searchCriteria={types}\n                    price={price * 1}\n                    review={ratings}\n                    radius={radius * 1609} //converting into meters\n                    locations={locations}\n                />\n            )\n        }\n\n        return ( //to prevent from crashing\n            <MyMapComponent searchCriteria=''\n                price=\"any\"\n                review=\"any\"\n                radius='0'\n            />\n        )\n\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}