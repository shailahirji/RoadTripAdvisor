{"ast":null,"code":"// import React, { Component } from 'react';\n// import { compose, withProps } from \"recompose\";\n// import { Map, GoogleApiWrapper, InfoWindow, Marker, google, Polyline  } from 'google-maps-react';\n// import {connect} from 'react-redux'\n// import MyMapComponent from './MyMapComponent'\n// import MealCard from './MealCard'\n// const mapStyles = {\n//   width: '60%',\n//   height: '60%'\n// };\n//  class MapContainer extends Component {\n//     state = {\n//         showingInfoWindow: false,  //Hides or the shows the infoWindow\n//         activeMarker: {},          //Shows the active marker upon click\n//         selectedPlace: {} ,         //Shows the infoWindow to the selected place upon a marker\n//       };\n//       onMarkerClick = (props, marker, e) =>\n//     this.setState({\n//       selectedPlace: props,\n//       activeMarker: marker,\n//       showingInfoWindow: true\n//     });\n//   onClose = props => {\n//     if (this.state.showingInfoWindow) {\n//       this.setState({\n//         showingInfoWindow: false,\n//         activeMarker: null\n//       });\n//     }\n//   };\n//   componentWillMount(){\n//     console.log(\"ON RECOIT LE PROP \",this.props.locations[0])\n//   }\n//   // renderMarkers(){\n//   //   this.props.locations.map(location => {\n//   //     console.log(\"FOR LOCATION \",location)\n//   //     return ( <Marker\n//   //       onClick={this.onMarkerClick}\n//   //       name={'Kenyatta International Convention Centre'}\n//   //       position={location}\n//   //     />)\n//   //   }\n//   //    )\n//   // }\n//     render() {\n//           const locations = this.props.locations;\n//           console.log(locations)\n//           return (\n//             <div>\n//         <MyMapComponent locations={this.props.locations}/>\n//           </div>\n//           )\n//       }\n//   }\n//   function Geocode(WrappedComponent){\n//     return class extends React.Component{\n//       constructor(){\n//         super()\n//         this.state= {markers:[]}\n//       }\n//       componentWillMount(){\n//         this.getGeoLocation();\n//       }\n//       async getGeoLocation(){\n//         if(this.props.markerLocations ){\n//           const locations = this.props.markerLocations;\n//           const markers = [];\n//         const from = await this.getLocationCoordinates(locations.from);\n//         const to = await this.getLocationCoordinates(locations.to);\n//         markers.push(from);\n//         markers.push(to);\n//          this.setState({markers:markers})\n//         }\n//       }\n//       getLocationCoordinates(location){\n//         return new Promise((resolve, reject)=>{\n//           const geocoder = new window.google.maps.Geocoder();\n//           geocoder.geocode({address:location}, (result, status)=>{\n//             if(status=='OK'){\n//               const geometry = result[0].geometry.location\n//               const coordinates = {\n//                 lat: geometry.lat(),\n//                 lng:geometry.lng()\n//               }\n//               resolve(coordinates);\n//             }\n//             else{\n//               reject('ERROR')\n//             }\n//           })\n//         });\n//       }\n//    renderMarkers(){\n//     console.log(\" THE STATE \",this.state.markers);\n//      this.state.markers.map(location =>{\n//        console.log(\" A LOCATION \", location)\n//      })\n//    }\n//    render(){\n//      if(this.state.markers.length>0){\n//        console.log(\"ON Y ARRIVE\")\n//        return (<WrappedComponent locations={this.state.markers} {...this.props}/>);\n//      }\n//      else{\n//        return (null)\n//      }\n//    }\n//     }\n//   }\n//   function mapStateToProps(state){\n//     return {\n//       markerLocations: state.mapReducer.data\n//     }\n//   }\n//   export const mapped = connect(mapStateToProps)(Geocode(MapContainer))\n//   export default GoogleApiWrapper({\n//     apiKey: 'AIzaSyC64eUv-Iw47Q9MqhsnpgzpvCUm-SM1qi4'\n//   })(mapped);","map":{"version":3,"sources":["/Users/shaila/Documents/GitHub/RoadTripAdvisor/Shaila/RTA-landing-meal/src/components/MapContainer.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA","sourcesContent":["// import React, { Component } from 'react';\n// import { compose, withProps } from \"recompose\";\n// import { Map, GoogleApiWrapper, InfoWindow, Marker, google, Polyline  } from 'google-maps-react';\n// import {connect} from 'react-redux'\n// import MyMapComponent from './MyMapComponent'\n// import MealCard from './MealCard'\n// const mapStyles = {\n//   width: '60%',\n//   height: '60%'\n// };\n\n//  class MapContainer extends Component {\n//     state = {\n//         showingInfoWindow: false,  //Hides or the shows the infoWindow\n//         activeMarker: {},          //Shows the active marker upon click\n//         selectedPlace: {} ,         //Shows the infoWindow to the selected place upon a marker\n      \n//       };\n//       onMarkerClick = (props, marker, e) =>\n//     this.setState({\n//       selectedPlace: props,\n//       activeMarker: marker,\n//       showingInfoWindow: true\n//     });\n   \n//   onClose = props => {\n//     if (this.state.showingInfoWindow) {\n//       this.setState({\n//         showingInfoWindow: false,\n//         activeMarker: null\n//       });\n//     }\n//   };\n\n\n//   componentWillMount(){\n//     console.log(\"ON RECOIT LE PROP \",this.props.locations[0])\n//   }\n\n//   // renderMarkers(){\n//   //   this.props.locations.map(location => {\n//   //     console.log(\"FOR LOCATION \",location)\n//   //     return ( <Marker\n//   //       onClick={this.onMarkerClick}\n//   //       name={'Kenyatta International Convention Centre'}\n//   //       position={location}\n//   //     />)\n//   //   }\n     \n//   //    )\n//   // }\n \n//     render() {\n       \n//           const locations = this.props.locations;\n//           console.log(locations)\n//           return (\n//             <div>\n//         <MyMapComponent locations={this.props.locations}/>\n     \n//           </div>\n//           )\n\n//       }\n   \n\n//   }\n\n//   function Geocode(WrappedComponent){\n\n//     return class extends React.Component{\n\n//       constructor(){\n//         super()\n//         this.state= {markers:[]}\n//       }\n\n//       componentWillMount(){\n//         this.getGeoLocation();\n//       }\n\n//       async getGeoLocation(){\n//         if(this.props.markerLocations ){\n//           const locations = this.props.markerLocations;\n//           const markers = [];\n//         const from = await this.getLocationCoordinates(locations.from);\n//         const to = await this.getLocationCoordinates(locations.to);\n//         markers.push(from);\n//         markers.push(to);\n//          this.setState({markers:markers})\n//         }\n//       }\n\n//       getLocationCoordinates(location){\n//         return new Promise((resolve, reject)=>{\n//           const geocoder = new window.google.maps.Geocoder();\n//           geocoder.geocode({address:location}, (result, status)=>{\n//             if(status=='OK'){\n//               const geometry = result[0].geometry.location\n//               const coordinates = {\n//                 lat: geometry.lat(),\n//                 lng:geometry.lng()\n//               }\n//               resolve(coordinates);\n             \n//             }\n//             else{\n//               reject('ERROR')\n//             }\n//           })\n          \n//         });\n      \n//       }\n\n\n//    renderMarkers(){\n//     console.log(\" THE STATE \",this.state.markers);\n//      this.state.markers.map(location =>{\n//        console.log(\" A LOCATION \", location)\n//      })\n//    }\n\n//    render(){\n//      if(this.state.markers.length>0){\n//        console.log(\"ON Y ARRIVE\")\n//        return (<WrappedComponent locations={this.state.markers} {...this.props}/>);\n//      }\n//      else{\n//        return (null)\n//      }\n    \n//    }\n\n//     }\n\n//   }\n\n//   function mapStateToProps(state){\n    \n//     return {\n//       markerLocations: state.mapReducer.data\n//     }\n//   }\n\n//   export const mapped = connect(mapStateToProps)(Geocode(MapContainer))\n\n//   export default GoogleApiWrapper({\n//     apiKey: 'AIzaSyC64eUv-Iw47Q9MqhsnpgzpvCUm-SM1qi4'\n//   })(mapped);\n  "]},"metadata":{},"sourceType":"module"}