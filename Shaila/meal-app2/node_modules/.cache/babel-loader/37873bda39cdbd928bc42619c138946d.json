{"ast":null,"code":"import _classCallCheck from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shaila/my-googlemap/src/Map.js\";\n//create component called CurrentLocation where all functionality to pick browsers location lies \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Geocode from 'react-geocode';\nvar mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\nGeocode.setApiKey('AIzaSyD-a_aMfM44H43DL1gkBccsYjcYgZTZWQk');\nexport var CurrentLocation =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CurrentLocation, _React$Component);\n\n  function CurrentLocation(props) {\n    var _this;\n\n    _classCallCheck(this, CurrentLocation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CurrentLocation).call(this, props)); //make it stateful\n\n    var _this$props$initialCe = _this.props.initialCenter,\n        lat = _this$props$initialCe.lat,\n        lng = _this$props$initialCe.lng;\n    _this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng,\n        name: 'something'\n      }\n    };\n    return _this;\n  }\n\n  _createClass(CurrentLocation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.centerAroundCurrentLocation) {\n        if (navigator && navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(function (pos) {\n            var coords = pos.coords;\n            var address = 'hello';\n            Geocode.fromLatLng(coords.latitude, coords.longitude).then(function (response) {\n              address = response.results[0].formatted_address;\n            });\n\n            _this2.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude,\n                name_loc: address\n              }\n            });\n          });\n        }\n      }\n\n      this.loadMap();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.google !== this.props.google) {\n        this.loadMap();\n      }\n\n      if (prevState.currentLocation !== this.state.currentLocation) {\n        this.recenterMap();\n      }\n    }\n  }, {\n    key: \"recenterMap\",\n    value: function recenterMap() {\n      var map = this.map;\n      var current = this.state.currentLocation;\n      var google = this.props.google;\n      var maps = google.maps;\n\n      if (map) {\n        var center = new maps.LatLng(current.lat, current.lng);\n        map.panTo(center);\n      }\n    } //only called after the component has been rendered and grabs a reference to the DOM component \n\n  }, {\n    key: \"loadMap\",\n    value: function loadMap() {\n      if (this.props && this.props.google) {\n        //check if google is available \n        var google = this.props.google;\n        var maps = google.maps;\n        var mapRef = this.refs.map; //reference to the actual DOM element \n\n        var node = ReactDOM.findDOMNode(mapRef);\n        var zoom = this.props.zoom;\n        var _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n        var center = new maps.LatLng(lat, lng);\n        var mapConfig = Object.assign({}, {\n          center: center,\n          zoom: zoom\n        });\n        this.map = new maps.Map(node, mapConfig);\n      }\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this3 = this;\n\n      var children = this.props.children;\n      if (!children) return;\n      return React.Children.map(children, function (c) {\n        if (!c) return;\n        return React.cloneElement(c, {\n          map: _this3.map,\n          google: _this3.props.google,\n          mapCenter: _this3.state.currentLocation\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = Object.assign({}, mapStyles.map);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: style,\n        ref: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Loading map . . .\"), this.renderChildren());\n    }\n  }]);\n\n  return CurrentLocation;\n}(React.Component);\nexport default CurrentLocation;\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 40.723839,\n    lng: -104.105515,\n    name: 'hey'\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};","map":{"version":3,"sources":["/Users/shaila/my-googlemap/src/Map.js"],"names":["React","ReactDOM","Geocode","mapStyles","map","position","width","height","setApiKey","CurrentLocation","props","initialCenter","lat","lng","state","currentLocation","name","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","address","fromLatLng","latitude","longitude","then","response","results","formatted_address","setState","name_loc","loadMap","prevProps","prevState","google","recenterMap","current","maps","center","LatLng","panTo","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","children","Children","c","cloneElement","mapCenter","style","renderChildren","Component","defaultProps","visible"],"mappings":"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","sourcesContent":["//create component called CurrentLocation where all functionality to pick browsers location lies \nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Geocode from 'react-geocode'\n\nconst mapStyles={\n    map:{\n        position :'absolute',\n        width:'100%',\n        height: '100%'\n    }\n};\n\nGeocode.setApiKey('AIzaSyD-a_aMfM44H43DL1gkBccsYjcYgZTZWQk');\n\nexport class CurrentLocation extends React.Component{\n    constructor(props){\n        super(props);//make it stateful\n        const {lat,lng}=this.props.initialCenter;\n        this.state={\n            currentLocation:{\n                lat: lat,\n                lng:lng,\n                name:'something'\n            }\n        };\n    }\n    componentDidMount(){\n        if(this.props.centerAroundCurrentLocation){\n            if(navigator && navigator.geolocation){\n                navigator.geolocation.getCurrentPosition(pos =>{\n                    const coords= pos.coords;\n                    let address='hello';\n                        Geocode.fromLatLng(coords.latitude,coords.longitude).then(\n                        response=>{\n                            address= response.results[0].formatted_address;\n                        }\n                    );\n                    this.setState({\n                        currentLocation:{\n                            lat: coords.latitude,\n                            lng:coords.longitude,\n                            name_loc:address\n\n                        }\n                    });\n                });\n                \n            }\n        }\n        this.loadMap();\n    }\n\n    componentDidUpdate(prevProps,prevState){\n        if(prevProps.google!== this.props.google){\n            this.loadMap();\n        }\n        if(prevState.currentLocation !== this.state.currentLocation){\n            this.recenterMap();\n        }\n    }\n\n    recenterMap(){\n        const map=this.map;\n        const current =this.state.currentLocation;\n\n        const google=this.props.google;\n        const maps=google.maps;\n\n        if(map){\n            let center=new maps.LatLng(current.lat,current.lng);\n            map.panTo(center);\n        }\n    }\n\n\n    //only called after the component has been rendered and grabs a reference to the DOM component \n    loadMap(){\n        \n        if(this.props && this.props.google){\n            //check if google is available \n            const{google}=this.props;\n            const maps=google.maps;\n            const mapRef=this.refs.map;\n\n            //reference to the actual DOM element \n            const node=ReactDOM.findDOMNode(mapRef);\n\n            let{zoom}=this.props;\n            const{lat,lng}=this.state.currentLocation;\n            const center= new maps.LatLng(lat,lng);\n            const mapConfig=Object.assign(\n                {},\n                {\n                    center:center,\n                    zoom:zoom\n                }\n            );\n            this.map= new maps.Map(node,mapConfig);\n        }\n    }\n\n    renderChildren(){\n        const {children}=this.props;\n\n        if(!children) return;\n\n        return React.Children.map(children, c=>{\n            if(!c) return;\n            return React.cloneElement(c,{\n                map: this.map,\n                google:this.props.google,\n                mapCenter: this.state.currentLocation\n            });\n        });\n    }\n\n    render(){\n        const style=Object.assign({},mapStyles.map);\n        return(\n            <div>\n                <div style={style} ref=\"map\">\n                Loading map . . .\n                </div>\n                {this.renderChildren()}\n            </div>\n        );\n    }\n    \n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps={\n    zoom:14,\n    initialCenter:{\n        lat:40.723839,\n        lng: -104.105515,\n        name:'hey'\n    },\n    centerAroundCurrentLocation:false,\n    visible:true\n};"]},"metadata":{},"sourceType":"module"}