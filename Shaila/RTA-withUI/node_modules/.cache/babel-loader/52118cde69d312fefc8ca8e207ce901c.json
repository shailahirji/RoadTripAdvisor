{"ast":null,"code":"import _classCallCheck from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shaila/my-googlemap/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shaila/my-googlemap/src/Map.js\";\n//create component called CurrentLocation where all functionality to pick browsers location lies \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Geocode from 'react-geocode';\nvar mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  }\n};\nGeocode.setApiKey('AIzaSyD-a_aMfM44H43DL1gkBccsYjcYgZTZWQk');\nexport var CurrentLocation =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CurrentLocation, _React$Component);\n\n  function CurrentLocation(props) {\n    var _this;\n\n    _classCallCheck(this, CurrentLocation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CurrentLocation).call(this, props)); //make it stateful\n\n    var _this$props$initialCe = _this.props.initialCenter,\n        lat = _this$props$initialCe.lat,\n        lng = _this$props$initialCe.lng,\n        name = _this$props$initialCe.name;\n    _this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng,\n        name: name\n      },\n      showingInfoWindow: false\n    };\n    return _this;\n  }\n\n  _createClass(CurrentLocation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.centerAroundCurrentLocation) {\n        if (navigator && navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(function (pos) {\n            var coords = pos.coords;\n\n            _this2.setState({\n              currentLocation: {\n                lat: coords.latitude,\n                lng: coords.longitude,\n                name_loc: Geocode.fromLatLng(coords.latitude, coords.longitude).then(function (response) {\n                  _this2.state.currentLocation.name_loc = response.results[0].formatted_address;\n                }, function (error) {\n                  console.log(error);\n                })\n              }\n            });\n          });\n        }\n      }\n\n      this.loadMap();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.google !== this.props.google) {\n        this.loadMap();\n      }\n\n      if (prevState.currentLocation !== this.state.currentLocation) {\n        this.recenterMap();\n      }\n    }\n  }, {\n    key: \"recenterMap\",\n    value: function recenterMap() {\n      var map = this.map;\n      var current = this.state.currentLocation;\n      var google = this.props.google;\n      var maps = google.maps;\n\n      if (map) {\n        var center = new maps.LatLng(current.lat, current.lng, current.name_loc);\n        map.panTo(center);\n      }\n    }\n  }, {\n    key: \"initMap\",\n    value: function initMap() {\n      var map = this.map;\n      var card = document.getElementById('pac-card');\n      var input = document.getElementById('pac-input');\n      var types = document.getElementById('type-selector');\n      var strictBounds = document.getElementById('strict-bounds-selector');\n      map.controls[map.ControlPosition.TOP_RIGHT].push(card);\n      var autocomplete = map.places.Autocomplete(input); // Bind the map's bounds (viewport) property to the autocomplete object,\n      // so that the autocomplete requests use the current map bounds for the\n      // bounds option in the request.\n\n      autocomplete.bindTo('bounds', map); // Set the data fields to return when the user selects a place.\n\n      autocomplete.setFields(['address_components', 'geometry', 'icon', 'name']);\n      var infowindow = map.InfoWindow();\n      var infowindowContent = document.getElementById('infowindow-content');\n      infowindow.setContent(infowindowContent);\n      var marker = map.Marker({\n        map: map,\n        anchorPoint: map.maps.Point(0, -29)\n      });\n      autocomplete.addListener('place_changed', function () {\n        infowindow.close();\n        marker.setVisible(false);\n        var place = autocomplete.getPlace();\n\n        if (!place.geometry) {\n          // User entered the name of a Place that was not suggested and\n          // pressed the Enter key, or the Place Details request failed.\n          window.alert(\"No details available for input: '\" + place.name + \"'\");\n          return;\n        } // If the place has a geometry, then present it on a map.\n\n\n        if (place.geometry.viewport) {\n          map.fitBounds(place.geometry.viewport);\n        } else {\n          map.setCenter(place.geometry.location);\n          map.setZoom(17); // Why 17? Because it looks good.\n        }\n\n        marker.setPosition(place.geometry.location);\n        marker.setVisible(true);\n        var address = '';\n\n        if (place.address_components) {\n          address = [place.address_components[0] && place.address_components[0].short_name || '', place.address_components[1] && place.address_components[1].short_name || '', place.address_components[2] && place.address_components[2].short_name || ''].join(' ');\n        }\n\n        infowindowContent.children['place-icon'].src = place.icon;\n        infowindowContent.children['place-name'].textContent = place.name;\n        infowindowContent.children['place-address'].textContent = address;\n        infowindow.open(map, marker);\n      }); // Sets a listener on a radio button to change the filter type on Places\n      // Autocomplete.\n\n      function setupClickListener(id, types) {\n        var radioButton = document.getElementById(id);\n        radioButton.addEventListener('click', function () {\n          autocomplete.setTypes(types);\n        });\n      }\n\n      setupClickListener('changetype-all', []);\n      setupClickListener('changetype-address', ['address']);\n      setupClickListener('changetype-establishment', ['establishment']);\n      setupClickListener('changetype-geocode', ['geocode']);\n      document.getElementById('use-strict-bounds').addEventListener('click', function () {\n        console.log('Checkbox clicked! New state=' + this.checked);\n        autocomplete.setOptions({\n          strictBounds: this.checked\n        });\n      });\n    } //only called after the component has been rendered and grabs a reference to the DOM component \n\n  }, {\n    key: \"loadMap\",\n    value: function loadMap() {\n      if (this.props && this.props.google) {\n        //check if google is available \n        var google = this.props.google;\n        var maps = google.maps;\n        var mapRef = this.refs.map; //reference to the actual DOM element \n\n        var node = ReactDOM.findDOMNode(mapRef);\n        var zoom = this.props.zoom;\n        var _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng,\n            name = _this$state$currentLo.name;\n        var center = new maps.LatLng(lat, lng, name);\n        var mapConfig = Object.assign({}, {\n          center: center,\n          zoom: zoom\n        });\n        this.map = new maps.Map(node, mapConfig);\n      }\n\n      this.initMap();\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this3 = this;\n\n      var children = this.props.children;\n      if (!children) return;\n      return React.Children.map(children, function (c) {\n        if (!c) return;\n        return React.cloneElement(c, {\n          map: _this3.map,\n          google: _this3.props.google,\n          mapCenter: _this3.state.currentLocation\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = Object.assign({}, mapStyles.map);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: style,\n        ref: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Loading map . . .\"), this.renderChildren());\n    }\n  }]);\n\n  return CurrentLocation;\n}(React.Component);\nexport default CurrentLocation;\nCurrentLocation.defaultProps = {\n  zoom: 20,\n  initialCenter: {\n    lat: 40.723839,\n    lng: -104.105515,\n    name: 'hey'\n  },\n  centerAroundCurrentLocation: false,\n  visible: false\n};","map":{"version":3,"sources":["/Users/shaila/my-googlemap/src/Map.js"],"names":["React","ReactDOM","Geocode","mapStyles","map","position","width","height","setApiKey","CurrentLocation","props","initialCenter","lat","lng","name","state","currentLocation","showingInfoWindow","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","name_loc","fromLatLng","then","response","results","formatted_address","error","console","log","loadMap","prevProps","prevState","google","recenterMap","current","maps","center","LatLng","panTo","card","document","getElementById","input","types","strictBounds","controls","ControlPosition","TOP_RIGHT","push","autocomplete","places","Autocomplete","bindTo","setFields","infowindow","InfoWindow","infowindowContent","setContent","marker","Marker","anchorPoint","Point","addListener","close","setVisible","place","getPlace","geometry","window","alert","viewport","fitBounds","setCenter","location","setZoom","setPosition","address","address_components","short_name","join","children","src","icon","textContent","open","setupClickListener","id","radioButton","addEventListener","setTypes","checked","setOptions","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","initMap","Children","c","cloneElement","mapCenter","style","renderChildren","Component","defaultProps","visible"],"mappings":"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","sourcesContent":["//create component called CurrentLocation where all functionality to pick browsers location lies \nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Geocode from 'react-geocode'\n\nconst mapStyles={\n    map:{\n        position :'absolute',\n        width:'100%',\n        height: '100%'\n    }\n};\n\nGeocode.setApiKey('AIzaSyD-a_aMfM44H43DL1gkBccsYjcYgZTZWQk');\n\nexport class CurrentLocation extends React.Component{\n    constructor(props){\n        super(props);//make it stateful\n        const {lat,lng,name}=this.props.initialCenter;\n        this.state={\n            currentLocation:{\n                lat: lat,\n                lng:lng,\n                name:name\n            },\n            showingInfoWindow:false\n        };\n    }\n \n    componentDidMount(){\n        if(this.props.centerAroundCurrentLocation){\n            if(navigator && navigator.geolocation){\n                navigator.geolocation.getCurrentPosition(pos =>{\n                    const coords= pos.coords;\n                    this.setState({\n                        currentLocation:{\n                            lat: coords.latitude,\n                            lng:coords.longitude,\n                            name_loc:  Geocode.fromLatLng(coords.latitude,coords.longitude).then(\n                                response=>{\n                                    this.state.currentLocation.name_loc=response.results[0].formatted_address;   \n                                },\n                                error =>{\n                                    console.log(error);\n                                }\n                            )\n                        }\n                    });\n                });\n                \n            }\n        }\n        this.loadMap();\n    }\n\n    componentDidUpdate(prevProps,prevState){\n        if(prevProps.google!== this.props.google){\n            this.loadMap();\n        }\n        if(prevState.currentLocation !== this.state.currentLocation){\n            this.recenterMap();\n        }\n    }\n\n    recenterMap(){\n        const map=this.map;\n        const current =this.state.currentLocation;\n\n        const google=this.props.google;\n        const maps=google.maps;\n\n        if(map){\n            let center=new maps.LatLng(current.lat,current.lng,current.name_loc);\n            map.panTo(center);\n        }\n    }\n    initMap() {\n        var map = this.map;\n        var card = document.getElementById('pac-card');\n        var input = document.getElementById('pac-input');\n        var types = document.getElementById('type-selector');\n        var strictBounds = document.getElementById('strict-bounds-selector');\n      \n        map.controls[map.ControlPosition.TOP_RIGHT].push(card);\n      \n        var autocomplete = map.places.Autocomplete(input);\n      \n        // Bind the map's bounds (viewport) property to the autocomplete object,\n        // so that the autocomplete requests use the current map bounds for the\n        // bounds option in the request.\n        autocomplete.bindTo('bounds', map);\n      \n        // Set the data fields to return when the user selects a place.\n        autocomplete.setFields(\n            ['address_components', 'geometry', 'icon', 'name']);\n      \n        var infowindow = map.InfoWindow();\n        var infowindowContent = document.getElementById('infowindow-content');\n        infowindow.setContent(infowindowContent);\n        var marker = map.Marker({\n          map: map,\n          anchorPoint: map.maps.Point(0, -29)\n        });\n      \n        autocomplete.addListener('place_changed', function() {\n          infowindow.close();\n          marker.setVisible(false);\n          var place = autocomplete.getPlace();\n          if (!place.geometry) {\n            // User entered the name of a Place that was not suggested and\n            // pressed the Enter key, or the Place Details request failed.\n            window.alert(\"No details available for input: '\" + place.name + \"'\");\n            return;\n          }\n      \n          // If the place has a geometry, then present it on a map.\n          if (place.geometry.viewport) {\n            map.fitBounds(place.geometry.viewport);\n          } else {\n            map.setCenter(place.geometry.location);\n            map.setZoom(17);  // Why 17? Because it looks good.\n          }\n          marker.setPosition(place.geometry.location);\n          marker.setVisible(true);\n      \n          var address = '';\n          if (place.address_components) {\n            address = [\n              (place.address_components[0] && place.address_components[0].short_name || ''),\n              (place.address_components[1] && place.address_components[1].short_name || ''),\n              (place.address_components[2] && place.address_components[2].short_name || '')\n            ].join(' ');\n          }\n      \n          infowindowContent.children['place-icon'].src = place.icon;\n          infowindowContent.children['place-name'].textContent = place.name;\n          infowindowContent.children['place-address'].textContent = address;\n          infowindow.open(map, marker);\n        });\n      \n        // Sets a listener on a radio button to change the filter type on Places\n        // Autocomplete.\n        function setupClickListener(id, types) {\n          var radioButton = document.getElementById(id);\n          radioButton.addEventListener('click', function() {\n            autocomplete.setTypes(types);\n          });\n        }\n      \n        setupClickListener('changetype-all', []);\n        setupClickListener('changetype-address', ['address']);\n        setupClickListener('changetype-establishment', ['establishment']);\n        setupClickListener('changetype-geocode', ['geocode']);\n      \n        document.getElementById('use-strict-bounds')\n            .addEventListener('click', function() {\n              console.log('Checkbox clicked! New state=' + this.checked);\n              autocomplete.setOptions({strictBounds: this.checked});\n            });\n      }\n    \n\n    //only called after the component has been rendered and grabs a reference to the DOM component \n    loadMap(){\n        \n        if(this.props && this.props.google){\n            //check if google is available \n            const{google}=this.props;\n            const maps=google.maps;\n            const mapRef=this.refs.map;\n\n            //reference to the actual DOM element \n            const node=ReactDOM.findDOMNode(mapRef);\n\n            let{zoom}=this.props;\n            const{lat,lng,name}=this.state.currentLocation;\n            const center= new maps.LatLng(lat,lng,name);\n            const mapConfig=Object.assign(\n                {},\n                {\n                    center:center,\n                    zoom:zoom\n                }\n            );\n            this.map= new maps.Map(node,mapConfig);\n        }\n        this.initMap();\n    }\n\n    renderChildren(){\n        const {children}=this.props;\n\n        if(!children) return;\n\n        return React.Children.map(children, c=>{\n            if(!c) return;\n            return React.cloneElement(c,{\n                map: this.map,\n                google:this.props.google,\n                mapCenter: this.state.currentLocation\n            });\n        });\n    }\n\n    render(){\n        const style=Object.assign({},mapStyles.map);\n        return(\n            <div>\n                <div style={style} ref=\"map\">\n                Loading map . . .\n                </div>\n                {this.renderChildren()}\n            </div>\n        );\n    }\n    \n}\n\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps={\n    zoom:20,\n    initialCenter:{\n        lat:40.723839,\n        lng: -104.105515,\n        name:'hey'\n    },\n    centerAroundCurrentLocation:false,\n    visible:false\n};"]},"metadata":{},"sourceType":"module"}